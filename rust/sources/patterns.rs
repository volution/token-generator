

use crate::prelude::*;




pub mod glyphs {
	
	use super::*;
	use super::consts::ascii::*;
	use super::consts::mnemonic::*;
	use super::consts::bip0039::*;
	
	
	
	
	macro_rules! define_set {
		( $_visibility : vis $_pattern : ident, $_variant : ident, [ $( $_char : expr, )* ] ) => {
			::paste::paste! {
				
				$(
					static [< _ $_pattern __ $_char __TEXT >] : &Text = & Text::$_variant ($_char);
					static [< _ $_pattern __ $_char __GLYPH >] : &Glyph = & Glyph::Text (Rb::new_static ( [< _ $_pattern __ $_char __TEXT >] ));
				)*
				
				#[ doc = concat! ( "Glyph character set for ", $( "`", stringify! ($_char), "` " ),*, "." ) ]
				$_visibility static [< $_pattern _SET >] : &[Rb<Glyph>] = &[ $(
						Rb::new_static ( [< _ $_pattern __ $_char __GLYPH >] ),
					)* ];
				
				$_visibility static [< $_pattern _GLYPH >] : &GlyphPattern = & GlyphPattern::Set (RbList::from_static ( [< $_pattern _SET >] ));
				$_visibility static [< $_pattern _ATOM >] : &AtomPattern = & AtomPattern::Glyph (Rb::new_static ( [< $_pattern _GLYPH >] ));
				$_visibility static [< $_pattern _TOKEN >] : &TokenPattern = & TokenPattern::Atom (Rb::new_static ( [< $_pattern _ATOM >] ));
			}
		};
	}
	
	macro_rules! define_integer {
		( $_visibility : vis $_pattern : ident, ( $_lower : tt ..= $_upper : tt ), $_format : expr ) => {
			::paste::paste! {
				
				$_visibility static [< $_pattern _GLYPH >] : &GlyphPattern = & GlyphPattern::Integer ($_lower, $_upper, $_format);
				$_visibility static [< $_pattern _ATOM >] : &AtomPattern = & AtomPattern::Glyph (Rb::new_static ( [< $_pattern _GLYPH >] ));
				$_visibility static [< $_pattern _TOKEN >] : &TokenPattern = & TokenPattern::Atom (Rb::new_static ( [< $_pattern _ATOM >] ));
			}
		};
	}
	
	macro_rules! define_bytes {
		( $_visibility : vis $_pattern : ident, $_format : expr, ( $_length : tt : $_each : tt ) ) => {
			macros::__count_call_with! ( [ $_length : $_each ] => define_bytes! ($_visibility $_pattern, $_format, ));
		};
		( $_visibility : vis $_pattern : ident, $_format : expr, [ $( $_count : literal, )* ] ) => {
			::paste::paste! {
				
				$(
					$_visibility static [< $_pattern _ $_count _GLYPH >] : &GlyphPattern = & GlyphPattern::Bytes ($_count, $_format);
					$_visibility static [< $_pattern _ $_count _ATOM >] : &AtomPattern = & AtomPattern::Glyph (Rb::new_static ( [< $_pattern _ $_count _GLYPH >] ));
					$_visibility static [< $_pattern _ $_count _TOKEN >] : &TokenPattern = & TokenPattern::Atom (Rb::new_static ( [< $_pattern _ $_count _ATOM >] ));
				)*
			}
		};
	}
	
	macro_rules! define_timestamp {
		( $_visibility : vis $_pattern : ident, $_format : expr ) => {
			::paste::paste! {
				
				$_visibility static [< $_pattern _GLYPH >] : &GlyphPattern = & GlyphPattern::Timestamp ($_format);
				$_visibility static [< $_pattern _ATOM >] : &AtomPattern = & AtomPattern::Glyph (Rb::new_static ( [< $_pattern _GLYPH >] ));
				$_visibility static [< $_pattern _TOKEN >] : &TokenPattern = & TokenPattern::Atom (Rb::new_static ( [< $_pattern _ATOM >] ));
			}
		};
	}
	
	
	
	
	define_set! (pub DIGIT_BASE2, Char, [ '0', '1', ]);
	define_set! (pub DIGIT_BASE8, Char, [ '0', '1', '2', '3', '4', '5', '6', '7', ]);
	define_set! (pub DIGIT_BASE10, Char, [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ]);
	
	define_set! (pub DIGIT_BASE16, Char, [
			'0', '1', '2', '3', '4', '5', '6', '7',
			'8', '9', 'a', 'b', 'c', 'd', 'e', 'f',
		]);
	
	define_set! (pub DIGIT_BASE32_HEX, Char, [
			'0', '1', '2', '3', '4', '5', '6', '7',
			'8', '9', 'a', 'b', 'c', 'd', 'e', 'f',
			'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
			'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
		]);
	
	
	
	
	// NOTE:  =>  https://www.ietf.org/rfc/rfc4648.html
	// NOTE:  #>  python -c 'print (", ".join ([ repr(c) for c in r""" abcdefgh ijklmnop qrstuvw xyz234567 """ if c != " " ]))'
	define_set! (pub DIGIT_BASE32_RFC, Char, [
			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
			'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
			'q', 'r', 's', 't', 'u', 'v', 'w', 'x',
			'y', 'z', '2', '3', '4', '5', '6', '7',
		]);
	
	// NOTE:  =>  https://www.ietf.org/rfc/rfc4648.html
	// NOTE:  #>  python -c 'print (", ".join ([ repr(c) for c in r""" ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 +/ """ if c != " " ]))'
	define_set! (pub DIGIT_BASE64_RFC, Char, [
			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
			'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
			'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
			'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
			'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
			'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
			'w', 'x', 'y', 'z', '0', '1', '2', '3',
			'4', '5', '6', '7', '8', '9', C2B, C2F,
		]);
	
	// NOTE:  #>  python -c 'print (", ".join ([ repr(c) for c in r""" ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 -_ """ if c != " " ]))'
	define_set! (pub DIGIT_BASE64_URL, Char, [
			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
			'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
			'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
			'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
			'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
			'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
			'w', 'x', 'y', 'z', '0', '1', '2', '3',
			'4', '5', '6', '7', '8', '9', C2D, C5F,
		]);
	
	
	
	
	// NOTE:  =>  https://en.bitcoinwiki.org/wiki/Base58
	// NOTE:  #>  python -c 'print (", ".join ([ repr(c) for c in r""" 123456789 ABCDEFGH JKLMN PQRSTUVWXYZ abcdefghijk mnopqrstuvwxyz """ if c != " " ]))'
	define_set! (pub DIGIT_BASE58, Char, [
			'1', '2', '3', '4', '5', '6', '7', '8', '9',
			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
			'J', 'K', 'L', 'M', 'N',
			'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
			'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
		]);
	
	// NOTE:  =>  https://en.bitcoin.it/wiki/BIP_0173
	// NOTE:  #>  python -c 'print (", ".join ([ repr(c) for c in r""" qpzry9x8 gf2tvdw0 s3jn54kh ce6mua7l """ if c != " " ]))'
	define_set! (pub DIGIT_BECH32, Char, [
			'q', 'p', 'z', 'r', 'y', '9', 'x', '8',
			'g', 'f', '2', 't', 'v', 'd', 'w', '0',
			's', '3', 'j', 'n', '5', '4', 'k', 'h',
			'c', 'e', '6', 'm', 'u', 'a', '7', 'l',
		]);
	
	// NOTE:  =>  https://rfc.zeromq.org/spec/32/
	define_set! (pub DIGIT_Z85, Char, [
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
			'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
			'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',
			'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
			'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
			'Y', 'Z', C2E, C2D, C3A, C2B, C3D, C5E, C21, C2F,
			C2A, C3F, C26, C3C, C3E, C28, C29, C5B, C5D, C7B,
			C7D, C40, C25, C24, C23,
		]);
	
	
	
	
	define_set! (pub ASCII_VOWEL_LOWER, Char, [
			'a', 'e', 'i', 'o', 'u',
		]);
	define_set! (pub ASCII_VOWEL_UPPER, Char, [
			'A', 'B', 'I', 'O', 'U',
		]);
	define_set! (pub ASCII_VOWEL_MIXED, Char, [
			'a', 'e', 'i', 'o', 'u',
			'A', 'B', 'I', 'O', 'U',
		]);
	
	
	define_set! (pub ASCII_CONSONANT_LOWER, Char, [
			'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',
		]);
	define_set! (pub ASCII_CONSONANT_UPPER, Char, [
			'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',
		]);
	define_set! (pub ASCII_CONSONANT_MIXED, Char, [
			'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',
			'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',
		]);
	
	
	define_set! (pub ASCII_LETTER_LOWER, Char, [
			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
		]);
	define_set! (pub ASCII_LETTER_UPPER, Char, [
			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
		]);
	define_set! (pub ASCII_LETTER_MIXED, Char, [
			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
		]);
	
	
	// NOTE:  #>  python -c 'print (", ".join ([ "C%0X" % ord (c) for c in r"""!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~""" ]))'
	define_set! (pub ASCII_SYMBOL, Char, [
			C21, C22, C23, C24, C25, C26, C27, C28, C29, C2A, C2B, C2C, C2D, C2E, C2F, C3A, C3B, C3C, C3D, C3E, C3F, C40, C5B, C5C, C5D, C5E, C5F, C60, C7B, C7C, C7D, C7E,
		]);
	
	// NOTE:  #>  python -c 'print ("".join ([ chr(c) for c in range (33, 127) ]))'
	// NOTE:  #>  python -c 'print (", ".join ([ "C%0X" % ord (c) for c in r"""!"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~""" ]))'
	define_set! (pub ASCII_PRINTABLE, Char, [
			     C21, C22, C23, C24, C25, C26, C27, C28, C29, C2A, C2B, C2C, C2D, C2E, C2F,
			C30, C31, C32, C33, C34, C35, C36, C37, C38, C39, C3A, C3B, C3C, C3D, C3E, C3F,
			C40, C41, C42, C43, C44, C45, C46, C47, C48, C49, C4A, C4B, C4C, C4D, C4E, C4F,
			C50, C51, C52, C53, C54, C55, C56, C57, C58, C59, C5A, C5B, C5C, C5D, C5E, C5F,
			C60, C61, C62, C63, C64, C65, C66, C67, C68, C69, C6A, C6B, C6C, C6D, C6E, C6F,
			C70, C71, C72, C73, C74, C75, C76, C77, C78, C79, C7A, C7B, C7C, C7D, C7E,
		]);
	
	
	
	
	// NOTE:  =>  https://github.com/dsw/proquint/blob/master/proquint-proposal.txt
	
	define_set! (pub PROQUINT_CONSONANT_LOWER, Char, [
			'b', 'd', 'f', 'g', 'h', 'j', 'k', 'l',
			'm', 'n', 'p', 'r', 's', 't', 'v', 'z',
		]);
	define_set! (pub PROQUINT_VOWEL_LOWER, Char, [
			'a', 'i', 'o', 'u',
		]);
	
	define_set! (pub PROQUINT_CONSONANT_UPPER, Char, [
			'B', 'D', 'F', 'G', 'H', 'J', 'K', 'L',
			'M', 'N', 'P', 'R', 'S', 'T', 'V', 'Z',
		]);
	define_set! (pub PROQUINT_VOWEL_UPPER, Char, [
			'A', 'I', 'O', 'U',
		]);
	
	
	
	
	define_set! (pub MNEMONIC_WORD, Str, [
			MW0001, MW0002, MW0003, MW0004, MW0005, MW0006, MW0007, MW0008, MW0009, MW0010, MW0011, MW0012, MW0013, MW0014, MW0015, MW0016, MW0017, MW0018, MW0019, MW0020, MW0021, MW0022, MW0023, MW0024, MW0025, MW0026, MW0027, MW0028, MW0029, MW0030, MW0031, MW0032, MW0033, MW0034, MW0035, MW0036, MW0037, MW0038, MW0039, MW0040, MW0041, MW0042, MW0043, MW0044, MW0045, MW0046, MW0047, MW0048, MW0049, MW0050, MW0051, MW0052, MW0053, MW0054, MW0055, MW0056, MW0057, MW0058, MW0059, MW0060, MW0061, MW0062, MW0063, MW0064, MW0065, MW0066, MW0067, MW0068, MW0069, MW0070, MW0071, MW0072, MW0073, MW0074, MW0075, MW0076, MW0077, MW0078, MW0079, MW0080, MW0081, MW0082, MW0083, MW0084, MW0085, MW0086, MW0087, MW0088, MW0089, MW0090, MW0091, MW0092, MW0093, MW0094, MW0095, MW0096, MW0097, MW0098, MW0099, MW0100,
			MW0101, MW0102, MW0103, MW0104, MW0105, MW0106, MW0107, MW0108, MW0109, MW0110, MW0111, MW0112, MW0113, MW0114, MW0115, MW0116, MW0117, MW0118, MW0119, MW0120, MW0121, MW0122, MW0123, MW0124, MW0125, MW0126, MW0127, MW0128, MW0129, MW0130, MW0131, MW0132, MW0133, MW0134, MW0135, MW0136, MW0137, MW0138, MW0139, MW0140, MW0141, MW0142, MW0143, MW0144, MW0145, MW0146, MW0147, MW0148, MW0149, MW0150, MW0151, MW0152, MW0153, MW0154, MW0155, MW0156, MW0157, MW0158, MW0159, MW0160, MW0161, MW0162, MW0163, MW0164, MW0165, MW0166, MW0167, MW0168, MW0169, MW0170, MW0171, MW0172, MW0173, MW0174, MW0175, MW0176, MW0177, MW0178, MW0179, MW0180, MW0181, MW0182, MW0183, MW0184, MW0185, MW0186, MW0187, MW0188, MW0189, MW0190, MW0191, MW0192, MW0193, MW0194, MW0195, MW0196, MW0197, MW0198, MW0199, MW0200,
			MW0201, MW0202, MW0203, MW0204, MW0205, MW0206, MW0207, MW0208, MW0209, MW0210, MW0211, MW0212, MW0213, MW0214, MW0215, MW0216, MW0217, MW0218, MW0219, MW0220, MW0221, MW0222, MW0223, MW0224, MW0225, MW0226, MW0227, MW0228, MW0229, MW0230, MW0231, MW0232, MW0233, MW0234, MW0235, MW0236, MW0237, MW0238, MW0239, MW0240, MW0241, MW0242, MW0243, MW0244, MW0245, MW0246, MW0247, MW0248, MW0249, MW0250, MW0251, MW0252, MW0253, MW0254, MW0255, MW0256, MW0257, MW0258, MW0259, MW0260, MW0261, MW0262, MW0263, MW0264, MW0265, MW0266, MW0267, MW0268, MW0269, MW0270, MW0271, MW0272, MW0273, MW0274, MW0275, MW0276, MW0277, MW0278, MW0279, MW0280, MW0281, MW0282, MW0283, MW0284, MW0285, MW0286, MW0287, MW0288, MW0289, MW0290, MW0291, MW0292, MW0293, MW0294, MW0295, MW0296, MW0297, MW0298, MW0299, MW0300,
			MW0301, MW0302, MW0303, MW0304, MW0305, MW0306, MW0307, MW0308, MW0309, MW0310, MW0311, MW0312, MW0313, MW0314, MW0315, MW0316, MW0317, MW0318, MW0319, MW0320, MW0321, MW0322, MW0323, MW0324, MW0325, MW0326, MW0327, MW0328, MW0329, MW0330, MW0331, MW0332, MW0333, MW0334, MW0335, MW0336, MW0337, MW0338, MW0339, MW0340, MW0341, MW0342, MW0343, MW0344, MW0345, MW0346, MW0347, MW0348, MW0349, MW0350, MW0351, MW0352, MW0353, MW0354, MW0355, MW0356, MW0357, MW0358, MW0359, MW0360, MW0361, MW0362, MW0363, MW0364, MW0365, MW0366, MW0367, MW0368, MW0369, MW0370, MW0371, MW0372, MW0373, MW0374, MW0375, MW0376, MW0377, MW0378, MW0379, MW0380, MW0381, MW0382, MW0383, MW0384, MW0385, MW0386, MW0387, MW0388, MW0389, MW0390, MW0391, MW0392, MW0393, MW0394, MW0395, MW0396, MW0397, MW0398, MW0399, MW0400,
			MW0401, MW0402, MW0403, MW0404, MW0405, MW0406, MW0407, MW0408, MW0409, MW0410, MW0411, MW0412, MW0413, MW0414, MW0415, MW0416, MW0417, MW0418, MW0419, MW0420, MW0421, MW0422, MW0423, MW0424, MW0425, MW0426, MW0427, MW0428, MW0429, MW0430, MW0431, MW0432, MW0433, MW0434, MW0435, MW0436, MW0437, MW0438, MW0439, MW0440, MW0441, MW0442, MW0443, MW0444, MW0445, MW0446, MW0447, MW0448, MW0449, MW0450, MW0451, MW0452, MW0453, MW0454, MW0455, MW0456, MW0457, MW0458, MW0459, MW0460, MW0461, MW0462, MW0463, MW0464, MW0465, MW0466, MW0467, MW0468, MW0469, MW0470, MW0471, MW0472, MW0473, MW0474, MW0475, MW0476, MW0477, MW0478, MW0479, MW0480, MW0481, MW0482, MW0483, MW0484, MW0485, MW0486, MW0487, MW0488, MW0489, MW0490, MW0491, MW0492, MW0493, MW0494, MW0495, MW0496, MW0497, MW0498, MW0499, MW0500,
			MW0501, MW0502, MW0503, MW0504, MW0505, MW0506, MW0507, MW0508, MW0509, MW0510, MW0511, MW0512, MW0513, MW0514, MW0515, MW0516, MW0517, MW0518, MW0519, MW0520, MW0521, MW0522, MW0523, MW0524, MW0525, MW0526, MW0527, MW0528, MW0529, MW0530, MW0531, MW0532, MW0533, MW0534, MW0535, MW0536, MW0537, MW0538, MW0539, MW0540, MW0541, MW0542, MW0543, MW0544, MW0545, MW0546, MW0547, MW0548, MW0549, MW0550, MW0551, MW0552, MW0553, MW0554, MW0555, MW0556, MW0557, MW0558, MW0559, MW0560, MW0561, MW0562, MW0563, MW0564, MW0565, MW0566, MW0567, MW0568, MW0569, MW0570, MW0571, MW0572, MW0573, MW0574, MW0575, MW0576, MW0577, MW0578, MW0579, MW0580, MW0581, MW0582, MW0583, MW0584, MW0585, MW0586, MW0587, MW0588, MW0589, MW0590, MW0591, MW0592, MW0593, MW0594, MW0595, MW0596, MW0597, MW0598, MW0599, MW0600,
			MW0601, MW0602, MW0603, MW0604, MW0605, MW0606, MW0607, MW0608, MW0609, MW0610, MW0611, MW0612, MW0613, MW0614, MW0615, MW0616, MW0617, MW0618, MW0619, MW0620, MW0621, MW0622, MW0623, MW0624, MW0625, MW0626, MW0627, MW0628, MW0629, MW0630, MW0631, MW0632, MW0633, MW0634, MW0635, MW0636, MW0637, MW0638, MW0639, MW0640, MW0641, MW0642, MW0643, MW0644, MW0645, MW0646, MW0647, MW0648, MW0649, MW0650, MW0651, MW0652, MW0653, MW0654, MW0655, MW0656, MW0657, MW0658, MW0659, MW0660, MW0661, MW0662, MW0663, MW0664, MW0665, MW0666, MW0667, MW0668, MW0669, MW0670, MW0671, MW0672, MW0673, MW0674, MW0675, MW0676, MW0677, MW0678, MW0679, MW0680, MW0681, MW0682, MW0683, MW0684, MW0685, MW0686, MW0687, MW0688, MW0689, MW0690, MW0691, MW0692, MW0693, MW0694, MW0695, MW0696, MW0697, MW0698, MW0699, MW0700,
			MW0701, MW0702, MW0703, MW0704, MW0705, MW0706, MW0707, MW0708, MW0709, MW0710, MW0711, MW0712, MW0713, MW0714, MW0715, MW0716, MW0717, MW0718, MW0719, MW0720, MW0721, MW0722, MW0723, MW0724, MW0725, MW0726, MW0727, MW0728, MW0729, MW0730, MW0731, MW0732, MW0733, MW0734, MW0735, MW0736, MW0737, MW0738, MW0739, MW0740, MW0741, MW0742, MW0743, MW0744, MW0745, MW0746, MW0747, MW0748, MW0749, MW0750, MW0751, MW0752, MW0753, MW0754, MW0755, MW0756, MW0757, MW0758, MW0759, MW0760, MW0761, MW0762, MW0763, MW0764, MW0765, MW0766, MW0767, MW0768, MW0769, MW0770, MW0771, MW0772, MW0773, MW0774, MW0775, MW0776, MW0777, MW0778, MW0779, MW0780, MW0781, MW0782, MW0783, MW0784, MW0785, MW0786, MW0787, MW0788, MW0789, MW0790, MW0791, MW0792, MW0793, MW0794, MW0795, MW0796, MW0797, MW0798, MW0799, MW0800,
			MW0801, MW0802, MW0803, MW0804, MW0805, MW0806, MW0807, MW0808, MW0809, MW0810, MW0811, MW0812, MW0813, MW0814, MW0815, MW0816, MW0817, MW0818, MW0819, MW0820, MW0821, MW0822, MW0823, MW0824, MW0825, MW0826, MW0827, MW0828, MW0829, MW0830, MW0831, MW0832, MW0833, MW0834, MW0835, MW0836, MW0837, MW0838, MW0839, MW0840, MW0841, MW0842, MW0843, MW0844, MW0845, MW0846, MW0847, MW0848, MW0849, MW0850, MW0851, MW0852, MW0853, MW0854, MW0855, MW0856, MW0857, MW0858, MW0859, MW0860, MW0861, MW0862, MW0863, MW0864, MW0865, MW0866, MW0867, MW0868, MW0869, MW0870, MW0871, MW0872, MW0873, MW0874, MW0875, MW0876, MW0877, MW0878, MW0879, MW0880, MW0881, MW0882, MW0883, MW0884, MW0885, MW0886, MW0887, MW0888, MW0889, MW0890, MW0891, MW0892, MW0893, MW0894, MW0895, MW0896, MW0897, MW0898, MW0899, MW0900,
			MW0901, MW0902, MW0903, MW0904, MW0905, MW0906, MW0907, MW0908, MW0909, MW0910, MW0911, MW0912, MW0913, MW0914, MW0915, MW0916, MW0917, MW0918, MW0919, MW0920, MW0921, MW0922, MW0923, MW0924, MW0925, MW0926, MW0927, MW0928, MW0929, MW0930, MW0931, MW0932, MW0933, MW0934, MW0935, MW0936, MW0937, MW0938, MW0939, MW0940, MW0941, MW0942, MW0943, MW0944, MW0945, MW0946, MW0947, MW0948, MW0949, MW0950, MW0951, MW0952, MW0953, MW0954, MW0955, MW0956, MW0957, MW0958, MW0959, MW0960, MW0961, MW0962, MW0963, MW0964, MW0965, MW0966, MW0967, MW0968, MW0969, MW0970, MW0971, MW0972, MW0973, MW0974, MW0975, MW0976, MW0977, MW0978, MW0979, MW0980, MW0981, MW0982, MW0983, MW0984, MW0985, MW0986, MW0987, MW0988, MW0989, MW0990, MW0991, MW0992, MW0993, MW0994, MW0995, MW0996, MW0997, MW0998, MW0999, MW1000,
			MW1001, MW1002, MW1003, MW1004, MW1005, MW1006, MW1007, MW1008, MW1009, MW1010, MW1011, MW1012, MW1013, MW1014, MW1015, MW1016, MW1017, MW1018, MW1019, MW1020, MW1021, MW1022, MW1023, MW1024, MW1025, MW1026, MW1027, MW1028, MW1029, MW1030, MW1031, MW1032, MW1033, MW1034, MW1035, MW1036, MW1037, MW1038, MW1039, MW1040, MW1041, MW1042, MW1043, MW1044, MW1045, MW1046, MW1047, MW1048, MW1049, MW1050, MW1051, MW1052, MW1053, MW1054, MW1055, MW1056, MW1057, MW1058, MW1059, MW1060, MW1061, MW1062, MW1063, MW1064, MW1065, MW1066, MW1067, MW1068, MW1069, MW1070, MW1071, MW1072, MW1073, MW1074, MW1075, MW1076, MW1077, MW1078, MW1079, MW1080, MW1081, MW1082, MW1083, MW1084, MW1085, MW1086, MW1087, MW1088, MW1089, MW1090, MW1091, MW1092, MW1093, MW1094, MW1095, MW1096, MW1097, MW1098, MW1099, MW1100,
			MW1101, MW1102, MW1103, MW1104, MW1105, MW1106, MW1107, MW1108, MW1109, MW1110, MW1111, MW1112, MW1113, MW1114, MW1115, MW1116, MW1117, MW1118, MW1119, MW1120, MW1121, MW1122, MW1123, MW1124, MW1125, MW1126, MW1127, MW1128, MW1129, MW1130, MW1131, MW1132, MW1133, MW1134, MW1135, MW1136, MW1137, MW1138, MW1139, MW1140, MW1141, MW1142, MW1143, MW1144, MW1145, MW1146, MW1147, MW1148, MW1149, MW1150, MW1151, MW1152, MW1153, MW1154, MW1155, MW1156, MW1157, MW1158, MW1159, MW1160, MW1161, MW1162, MW1163, MW1164, MW1165, MW1166, MW1167, MW1168, MW1169, MW1170, MW1171, MW1172, MW1173, MW1174, MW1175, MW1176, MW1177, MW1178, MW1179, MW1180, MW1181, MW1182, MW1183, MW1184, MW1185, MW1186, MW1187, MW1188, MW1189, MW1190, MW1191, MW1192, MW1193, MW1194, MW1195, MW1196, MW1197, MW1198, MW1199, MW1200,
			MW1201, MW1202, MW1203, MW1204, MW1205, MW1206, MW1207, MW1208, MW1209, MW1210, MW1211, MW1212, MW1213, MW1214, MW1215, MW1216, MW1217, MW1218, MW1219, MW1220, MW1221, MW1222, MW1223, MW1224, MW1225, MW1226, MW1227, MW1228, MW1229, MW1230, MW1231, MW1232, MW1233, MW1234, MW1235, MW1236, MW1237, MW1238, MW1239, MW1240, MW1241, MW1242, MW1243, MW1244, MW1245, MW1246, MW1247, MW1248, MW1249, MW1250, MW1251, MW1252, MW1253, MW1254, MW1255, MW1256, MW1257, MW1258, MW1259, MW1260, MW1261, MW1262, MW1263, MW1264, MW1265, MW1266, MW1267, MW1268, MW1269, MW1270, MW1271, MW1272, MW1273, MW1274, MW1275, MW1276, MW1277, MW1278, MW1279, MW1280, MW1281, MW1282, MW1283, MW1284, MW1285, MW1286, MW1287, MW1288, MW1289, MW1290, MW1291, MW1292, MW1293, MW1294, MW1295, MW1296, MW1297, MW1298, MW1299, MW1300,
			MW1301, MW1302, MW1303, MW1304, MW1305, MW1306, MW1307, MW1308, MW1309, MW1310, MW1311, MW1312, MW1313, MW1314, MW1315, MW1316, MW1317, MW1318, MW1319, MW1320, MW1321, MW1322, MW1323, MW1324, MW1325, MW1326, MW1327, MW1328, MW1329, MW1330, MW1331, MW1332, MW1333, MW1334, MW1335, MW1336, MW1337, MW1338, MW1339, MW1340, MW1341, MW1342, MW1343, MW1344, MW1345, MW1346, MW1347, MW1348, MW1349, MW1350, MW1351, MW1352, MW1353, MW1354, MW1355, MW1356, MW1357, MW1358, MW1359, MW1360, MW1361, MW1362, MW1363, MW1364, MW1365, MW1366, MW1367, MW1368, MW1369, MW1370, MW1371, MW1372, MW1373, MW1374, MW1375, MW1376, MW1377, MW1378, MW1379, MW1380, MW1381, MW1382, MW1383, MW1384, MW1385, MW1386, MW1387, MW1388, MW1389, MW1390, MW1391, MW1392, MW1393, MW1394, MW1395, MW1396, MW1397, MW1398, MW1399, MW1400,
			MW1401, MW1402, MW1403, MW1404, MW1405, MW1406, MW1407, MW1408, MW1409, MW1410, MW1411, MW1412, MW1413, MW1414, MW1415, MW1416, MW1417, MW1418, MW1419, MW1420, MW1421, MW1422, MW1423, MW1424, MW1425, MW1426, MW1427, MW1428, MW1429, MW1430, MW1431, MW1432, MW1433, MW1434, MW1435, MW1436, MW1437, MW1438, MW1439, MW1440, MW1441, MW1442, MW1443, MW1444, MW1445, MW1446, MW1447, MW1448, MW1449, MW1450, MW1451, MW1452, MW1453, MW1454, MW1455, MW1456, MW1457, MW1458, MW1459, MW1460, MW1461, MW1462, MW1463, MW1464, MW1465, MW1466, MW1467, MW1468, MW1469, MW1470, MW1471, MW1472, MW1473, MW1474, MW1475, MW1476, MW1477, MW1478, MW1479, MW1480, MW1481, MW1482, MW1483, MW1484, MW1485, MW1486, MW1487, MW1488, MW1489, MW1490, MW1491, MW1492, MW1493, MW1494, MW1495, MW1496, MW1497, MW1498, MW1499, MW1500,
			MW1501, MW1502, MW1503, MW1504, MW1505, MW1506, MW1507, MW1508, MW1509, MW1510, MW1511, MW1512, MW1513, MW1514, MW1515, MW1516, MW1517, MW1518, MW1519, MW1520, MW1521, MW1522, MW1523, MW1524, MW1525, MW1526, MW1527, MW1528, MW1529, MW1530, MW1531, MW1532, MW1533, MW1534, MW1535, MW1536, MW1537, MW1538, MW1539, MW1540, MW1541, MW1542, MW1543, MW1544, MW1545, MW1546, MW1547, MW1548, MW1549, MW1550, MW1551, MW1552, MW1553, MW1554, MW1555, MW1556, MW1557, MW1558, MW1559, MW1560, MW1561, MW1562, MW1563, MW1564, MW1565, MW1566, MW1567, MW1568, MW1569, MW1570, MW1571, MW1572, MW1573, MW1574, MW1575, MW1576, MW1577, MW1578, MW1579, MW1580, MW1581, MW1582, MW1583, MW1584, MW1585, MW1586, MW1587, MW1588, MW1589, MW1590, MW1591, MW1592, MW1593, MW1594, MW1595, MW1596, MW1597, MW1598, MW1599, MW1600,
			MW1601, MW1602, MW1603, MW1604, MW1605, MW1606, MW1607, MW1608, MW1609, MW1610, MW1611, MW1612, MW1613, MW1614, MW1615, MW1616, MW1617, MW1618, MW1619, MW1620, MW1621, MW1622, MW1623, MW1624, MW1625, MW1626, MW1627, MW1628, MW1629, MW1630, MW1631, MW1632, MW1633,
		]);
	
	
	
	
	define_set! (pub BIP0039_WORD, Str, [
			BW0001, BW0002, BW0003, BW0004, BW0005, BW0006, BW0007, BW0008, BW0009, BW0010, BW0011, BW0012, BW0013, BW0014, BW0015, BW0016, BW0017, BW0018, BW0019, BW0020, BW0021, BW0022, BW0023, BW0024, BW0025, BW0026, BW0027, BW0028, BW0029, BW0030, BW0031, BW0032, BW0033, BW0034, BW0035, BW0036, BW0037, BW0038, BW0039, BW0040, BW0041, BW0042, BW0043, BW0044, BW0045, BW0046, BW0047, BW0048, BW0049, BW0050, BW0051, BW0052, BW0053, BW0054, BW0055, BW0056, BW0057, BW0058, BW0059, BW0060, BW0061, BW0062, BW0063, BW0064, BW0065, BW0066, BW0067, BW0068, BW0069, BW0070, BW0071, BW0072, BW0073, BW0074, BW0075, BW0076, BW0077, BW0078, BW0079, BW0080, BW0081, BW0082, BW0083, BW0084, BW0085, BW0086, BW0087, BW0088, BW0089, BW0090, BW0091, BW0092, BW0093, BW0094, BW0095, BW0096, BW0097, BW0098, BW0099, BW0100, BW0101, BW0102, BW0103, BW0104, BW0105, BW0106, BW0107, BW0108, BW0109, BW0110, BW0111, BW0112, BW0113, BW0114, BW0115, BW0116, BW0117, BW0118, BW0119, BW0120, BW0121, BW0122, BW0123, BW0124, BW0125, BW0126, BW0127, BW0128,
			BW0129, BW0130, BW0131, BW0132, BW0133, BW0134, BW0135, BW0136, BW0137, BW0138, BW0139, BW0140, BW0141, BW0142, BW0143, BW0144, BW0145, BW0146, BW0147, BW0148, BW0149, BW0150, BW0151, BW0152, BW0153, BW0154, BW0155, BW0156, BW0157, BW0158, BW0159, BW0160, BW0161, BW0162, BW0163, BW0164, BW0165, BW0166, BW0167, BW0168, BW0169, BW0170, BW0171, BW0172, BW0173, BW0174, BW0175, BW0176, BW0177, BW0178, BW0179, BW0180, BW0181, BW0182, BW0183, BW0184, BW0185, BW0186, BW0187, BW0188, BW0189, BW0190, BW0191, BW0192, BW0193, BW0194, BW0195, BW0196, BW0197, BW0198, BW0199, BW0200, BW0201, BW0202, BW0203, BW0204, BW0205, BW0206, BW0207, BW0208, BW0209, BW0210, BW0211, BW0212, BW0213, BW0214, BW0215, BW0216, BW0217, BW0218, BW0219, BW0220, BW0221, BW0222, BW0223, BW0224, BW0225, BW0226, BW0227, BW0228, BW0229, BW0230, BW0231, BW0232, BW0233, BW0234, BW0235, BW0236, BW0237, BW0238, BW0239, BW0240, BW0241, BW0242, BW0243, BW0244, BW0245, BW0246, BW0247, BW0248, BW0249, BW0250, BW0251, BW0252, BW0253, BW0254, BW0255, BW0256,
			BW0257, BW0258, BW0259, BW0260, BW0261, BW0262, BW0263, BW0264, BW0265, BW0266, BW0267, BW0268, BW0269, BW0270, BW0271, BW0272, BW0273, BW0274, BW0275, BW0276, BW0277, BW0278, BW0279, BW0280, BW0281, BW0282, BW0283, BW0284, BW0285, BW0286, BW0287, BW0288, BW0289, BW0290, BW0291, BW0292, BW0293, BW0294, BW0295, BW0296, BW0297, BW0298, BW0299, BW0300, BW0301, BW0302, BW0303, BW0304, BW0305, BW0306, BW0307, BW0308, BW0309, BW0310, BW0311, BW0312, BW0313, BW0314, BW0315, BW0316, BW0317, BW0318, BW0319, BW0320, BW0321, BW0322, BW0323, BW0324, BW0325, BW0326, BW0327, BW0328, BW0329, BW0330, BW0331, BW0332, BW0333, BW0334, BW0335, BW0336, BW0337, BW0338, BW0339, BW0340, BW0341, BW0342, BW0343, BW0344, BW0345, BW0346, BW0347, BW0348, BW0349, BW0350, BW0351, BW0352, BW0353, BW0354, BW0355, BW0356, BW0357, BW0358, BW0359, BW0360, BW0361, BW0362, BW0363, BW0364, BW0365, BW0366, BW0367, BW0368, BW0369, BW0370, BW0371, BW0372, BW0373, BW0374, BW0375, BW0376, BW0377, BW0378, BW0379, BW0380, BW0381, BW0382, BW0383, BW0384,
			BW0385, BW0386, BW0387, BW0388, BW0389, BW0390, BW0391, BW0392, BW0393, BW0394, BW0395, BW0396, BW0397, BW0398, BW0399, BW0400, BW0401, BW0402, BW0403, BW0404, BW0405, BW0406, BW0407, BW0408, BW0409, BW0410, BW0411, BW0412, BW0413, BW0414, BW0415, BW0416, BW0417, BW0418, BW0419, BW0420, BW0421, BW0422, BW0423, BW0424, BW0425, BW0426, BW0427, BW0428, BW0429, BW0430, BW0431, BW0432, BW0433, BW0434, BW0435, BW0436, BW0437, BW0438, BW0439, BW0440, BW0441, BW0442, BW0443, BW0444, BW0445, BW0446, BW0447, BW0448, BW0449, BW0450, BW0451, BW0452, BW0453, BW0454, BW0455, BW0456, BW0457, BW0458, BW0459, BW0460, BW0461, BW0462, BW0463, BW0464, BW0465, BW0466, BW0467, BW0468, BW0469, BW0470, BW0471, BW0472, BW0473, BW0474, BW0475, BW0476, BW0477, BW0478, BW0479, BW0480, BW0481, BW0482, BW0483, BW0484, BW0485, BW0486, BW0487, BW0488, BW0489, BW0490, BW0491, BW0492, BW0493, BW0494, BW0495, BW0496, BW0497, BW0498, BW0499, BW0500, BW0501, BW0502, BW0503, BW0504, BW0505, BW0506, BW0507, BW0508, BW0509, BW0510, BW0511, BW0512,
			BW0513, BW0514, BW0515, BW0516, BW0517, BW0518, BW0519, BW0520, BW0521, BW0522, BW0523, BW0524, BW0525, BW0526, BW0527, BW0528, BW0529, BW0530, BW0531, BW0532, BW0533, BW0534, BW0535, BW0536, BW0537, BW0538, BW0539, BW0540, BW0541, BW0542, BW0543, BW0544, BW0545, BW0546, BW0547, BW0548, BW0549, BW0550, BW0551, BW0552, BW0553, BW0554, BW0555, BW0556, BW0557, BW0558, BW0559, BW0560, BW0561, BW0562, BW0563, BW0564, BW0565, BW0566, BW0567, BW0568, BW0569, BW0570, BW0571, BW0572, BW0573, BW0574, BW0575, BW0576, BW0577, BW0578, BW0579, BW0580, BW0581, BW0582, BW0583, BW0584, BW0585, BW0586, BW0587, BW0588, BW0589, BW0590, BW0591, BW0592, BW0593, BW0594, BW0595, BW0596, BW0597, BW0598, BW0599, BW0600, BW0601, BW0602, BW0603, BW0604, BW0605, BW0606, BW0607, BW0608, BW0609, BW0610, BW0611, BW0612, BW0613, BW0614, BW0615, BW0616, BW0617, BW0618, BW0619, BW0620, BW0621, BW0622, BW0623, BW0624, BW0625, BW0626, BW0627, BW0628, BW0629, BW0630, BW0631, BW0632, BW0633, BW0634, BW0635, BW0636, BW0637, BW0638, BW0639, BW0640,
			BW0641, BW0642, BW0643, BW0644, BW0645, BW0646, BW0647, BW0648, BW0649, BW0650, BW0651, BW0652, BW0653, BW0654, BW0655, BW0656, BW0657, BW0658, BW0659, BW0660, BW0661, BW0662, BW0663, BW0664, BW0665, BW0666, BW0667, BW0668, BW0669, BW0670, BW0671, BW0672, BW0673, BW0674, BW0675, BW0676, BW0677, BW0678, BW0679, BW0680, BW0681, BW0682, BW0683, BW0684, BW0685, BW0686, BW0687, BW0688, BW0689, BW0690, BW0691, BW0692, BW0693, BW0694, BW0695, BW0696, BW0697, BW0698, BW0699, BW0700, BW0701, BW0702, BW0703, BW0704, BW0705, BW0706, BW0707, BW0708, BW0709, BW0710, BW0711, BW0712, BW0713, BW0714, BW0715, BW0716, BW0717, BW0718, BW0719, BW0720, BW0721, BW0722, BW0723, BW0724, BW0725, BW0726, BW0727, BW0728, BW0729, BW0730, BW0731, BW0732, BW0733, BW0734, BW0735, BW0736, BW0737, BW0738, BW0739, BW0740, BW0741, BW0742, BW0743, BW0744, BW0745, BW0746, BW0747, BW0748, BW0749, BW0750, BW0751, BW0752, BW0753, BW0754, BW0755, BW0756, BW0757, BW0758, BW0759, BW0760, BW0761, BW0762, BW0763, BW0764, BW0765, BW0766, BW0767, BW0768,
			BW0769, BW0770, BW0771, BW0772, BW0773, BW0774, BW0775, BW0776, BW0777, BW0778, BW0779, BW0780, BW0781, BW0782, BW0783, BW0784, BW0785, BW0786, BW0787, BW0788, BW0789, BW0790, BW0791, BW0792, BW0793, BW0794, BW0795, BW0796, BW0797, BW0798, BW0799, BW0800, BW0801, BW0802, BW0803, BW0804, BW0805, BW0806, BW0807, BW0808, BW0809, BW0810, BW0811, BW0812, BW0813, BW0814, BW0815, BW0816, BW0817, BW0818, BW0819, BW0820, BW0821, BW0822, BW0823, BW0824, BW0825, BW0826, BW0827, BW0828, BW0829, BW0830, BW0831, BW0832, BW0833, BW0834, BW0835, BW0836, BW0837, BW0838, BW0839, BW0840, BW0841, BW0842, BW0843, BW0844, BW0845, BW0846, BW0847, BW0848, BW0849, BW0850, BW0851, BW0852, BW0853, BW0854, BW0855, BW0856, BW0857, BW0858, BW0859, BW0860, BW0861, BW0862, BW0863, BW0864, BW0865, BW0866, BW0867, BW0868, BW0869, BW0870, BW0871, BW0872, BW0873, BW0874, BW0875, BW0876, BW0877, BW0878, BW0879, BW0880, BW0881, BW0882, BW0883, BW0884, BW0885, BW0886, BW0887, BW0888, BW0889, BW0890, BW0891, BW0892, BW0893, BW0894, BW0895, BW0896,
			BW0897, BW0898, BW0899, BW0900, BW0901, BW0902, BW0903, BW0904, BW0905, BW0906, BW0907, BW0908, BW0909, BW0910, BW0911, BW0912, BW0913, BW0914, BW0915, BW0916, BW0917, BW0918, BW0919, BW0920, BW0921, BW0922, BW0923, BW0924, BW0925, BW0926, BW0927, BW0928, BW0929, BW0930, BW0931, BW0932, BW0933, BW0934, BW0935, BW0936, BW0937, BW0938, BW0939, BW0940, BW0941, BW0942, BW0943, BW0944, BW0945, BW0946, BW0947, BW0948, BW0949, BW0950, BW0951, BW0952, BW0953, BW0954, BW0955, BW0956, BW0957, BW0958, BW0959, BW0960, BW0961, BW0962, BW0963, BW0964, BW0965, BW0966, BW0967, BW0968, BW0969, BW0970, BW0971, BW0972, BW0973, BW0974, BW0975, BW0976, BW0977, BW0978, BW0979, BW0980, BW0981, BW0982, BW0983, BW0984, BW0985, BW0986, BW0987, BW0988, BW0989, BW0990, BW0991, BW0992, BW0993, BW0994, BW0995, BW0996, BW0997, BW0998, BW0999, BW1000, BW1001, BW1002, BW1003, BW1004, BW1005, BW1006, BW1007, BW1008, BW1009, BW1010, BW1011, BW1012, BW1013, BW1014, BW1015, BW1016, BW1017, BW1018, BW1019, BW1020, BW1021, BW1022, BW1023, BW1024,
			BW1025, BW1026, BW1027, BW1028, BW1029, BW1030, BW1031, BW1032, BW1033, BW1034, BW1035, BW1036, BW1037, BW1038, BW1039, BW1040, BW1041, BW1042, BW1043, BW1044, BW1045, BW1046, BW1047, BW1048, BW1049, BW1050, BW1051, BW1052, BW1053, BW1054, BW1055, BW1056, BW1057, BW1058, BW1059, BW1060, BW1061, BW1062, BW1063, BW1064, BW1065, BW1066, BW1067, BW1068, BW1069, BW1070, BW1071, BW1072, BW1073, BW1074, BW1075, BW1076, BW1077, BW1078, BW1079, BW1080, BW1081, BW1082, BW1083, BW1084, BW1085, BW1086, BW1087, BW1088, BW1089, BW1090, BW1091, BW1092, BW1093, BW1094, BW1095, BW1096, BW1097, BW1098, BW1099, BW1100, BW1101, BW1102, BW1103, BW1104, BW1105, BW1106, BW1107, BW1108, BW1109, BW1110, BW1111, BW1112, BW1113, BW1114, BW1115, BW1116, BW1117, BW1118, BW1119, BW1120, BW1121, BW1122, BW1123, BW1124, BW1125, BW1126, BW1127, BW1128, BW1129, BW1130, BW1131, BW1132, BW1133, BW1134, BW1135, BW1136, BW1137, BW1138, BW1139, BW1140, BW1141, BW1142, BW1143, BW1144, BW1145, BW1146, BW1147, BW1148, BW1149, BW1150, BW1151, BW1152,
			BW1153, BW1154, BW1155, BW1156, BW1157, BW1158, BW1159, BW1160, BW1161, BW1162, BW1163, BW1164, BW1165, BW1166, BW1167, BW1168, BW1169, BW1170, BW1171, BW1172, BW1173, BW1174, BW1175, BW1176, BW1177, BW1178, BW1179, BW1180, BW1181, BW1182, BW1183, BW1184, BW1185, BW1186, BW1187, BW1188, BW1189, BW1190, BW1191, BW1192, BW1193, BW1194, BW1195, BW1196, BW1197, BW1198, BW1199, BW1200, BW1201, BW1202, BW1203, BW1204, BW1205, BW1206, BW1207, BW1208, BW1209, BW1210, BW1211, BW1212, BW1213, BW1214, BW1215, BW1216, BW1217, BW1218, BW1219, BW1220, BW1221, BW1222, BW1223, BW1224, BW1225, BW1226, BW1227, BW1228, BW1229, BW1230, BW1231, BW1232, BW1233, BW1234, BW1235, BW1236, BW1237, BW1238, BW1239, BW1240, BW1241, BW1242, BW1243, BW1244, BW1245, BW1246, BW1247, BW1248, BW1249, BW1250, BW1251, BW1252, BW1253, BW1254, BW1255, BW1256, BW1257, BW1258, BW1259, BW1260, BW1261, BW1262, BW1263, BW1264, BW1265, BW1266, BW1267, BW1268, BW1269, BW1270, BW1271, BW1272, BW1273, BW1274, BW1275, BW1276, BW1277, BW1278, BW1279, BW1280,
			BW1281, BW1282, BW1283, BW1284, BW1285, BW1286, BW1287, BW1288, BW1289, BW1290, BW1291, BW1292, BW1293, BW1294, BW1295, BW1296, BW1297, BW1298, BW1299, BW1300, BW1301, BW1302, BW1303, BW1304, BW1305, BW1306, BW1307, BW1308, BW1309, BW1310, BW1311, BW1312, BW1313, BW1314, BW1315, BW1316, BW1317, BW1318, BW1319, BW1320, BW1321, BW1322, BW1323, BW1324, BW1325, BW1326, BW1327, BW1328, BW1329, BW1330, BW1331, BW1332, BW1333, BW1334, BW1335, BW1336, BW1337, BW1338, BW1339, BW1340, BW1341, BW1342, BW1343, BW1344, BW1345, BW1346, BW1347, BW1348, BW1349, BW1350, BW1351, BW1352, BW1353, BW1354, BW1355, BW1356, BW1357, BW1358, BW1359, BW1360, BW1361, BW1362, BW1363, BW1364, BW1365, BW1366, BW1367, BW1368, BW1369, BW1370, BW1371, BW1372, BW1373, BW1374, BW1375, BW1376, BW1377, BW1378, BW1379, BW1380, BW1381, BW1382, BW1383, BW1384, BW1385, BW1386, BW1387, BW1388, BW1389, BW1390, BW1391, BW1392, BW1393, BW1394, BW1395, BW1396, BW1397, BW1398, BW1399, BW1400, BW1401, BW1402, BW1403, BW1404, BW1405, BW1406, BW1407, BW1408,
			BW1409, BW1410, BW1411, BW1412, BW1413, BW1414, BW1415, BW1416, BW1417, BW1418, BW1419, BW1420, BW1421, BW1422, BW1423, BW1424, BW1425, BW1426, BW1427, BW1428, BW1429, BW1430, BW1431, BW1432, BW1433, BW1434, BW1435, BW1436, BW1437, BW1438, BW1439, BW1440, BW1441, BW1442, BW1443, BW1444, BW1445, BW1446, BW1447, BW1448, BW1449, BW1450, BW1451, BW1452, BW1453, BW1454, BW1455, BW1456, BW1457, BW1458, BW1459, BW1460, BW1461, BW1462, BW1463, BW1464, BW1465, BW1466, BW1467, BW1468, BW1469, BW1470, BW1471, BW1472, BW1473, BW1474, BW1475, BW1476, BW1477, BW1478, BW1479, BW1480, BW1481, BW1482, BW1483, BW1484, BW1485, BW1486, BW1487, BW1488, BW1489, BW1490, BW1491, BW1492, BW1493, BW1494, BW1495, BW1496, BW1497, BW1498, BW1499, BW1500, BW1501, BW1502, BW1503, BW1504, BW1505, BW1506, BW1507, BW1508, BW1509, BW1510, BW1511, BW1512, BW1513, BW1514, BW1515, BW1516, BW1517, BW1518, BW1519, BW1520, BW1521, BW1522, BW1523, BW1524, BW1525, BW1526, BW1527, BW1528, BW1529, BW1530, BW1531, BW1532, BW1533, BW1534, BW1535, BW1536,
			BW1537, BW1538, BW1539, BW1540, BW1541, BW1542, BW1543, BW1544, BW1545, BW1546, BW1547, BW1548, BW1549, BW1550, BW1551, BW1552, BW1553, BW1554, BW1555, BW1556, BW1557, BW1558, BW1559, BW1560, BW1561, BW1562, BW1563, BW1564, BW1565, BW1566, BW1567, BW1568, BW1569, BW1570, BW1571, BW1572, BW1573, BW1574, BW1575, BW1576, BW1577, BW1578, BW1579, BW1580, BW1581, BW1582, BW1583, BW1584, BW1585, BW1586, BW1587, BW1588, BW1589, BW1590, BW1591, BW1592, BW1593, BW1594, BW1595, BW1596, BW1597, BW1598, BW1599, BW1600, BW1601, BW1602, BW1603, BW1604, BW1605, BW1606, BW1607, BW1608, BW1609, BW1610, BW1611, BW1612, BW1613, BW1614, BW1615, BW1616, BW1617, BW1618, BW1619, BW1620, BW1621, BW1622, BW1623, BW1624, BW1625, BW1626, BW1627, BW1628, BW1629, BW1630, BW1631, BW1632, BW1633, BW1634, BW1635, BW1636, BW1637, BW1638, BW1639, BW1640, BW1641, BW1642, BW1643, BW1644, BW1645, BW1646, BW1647, BW1648, BW1649, BW1650, BW1651, BW1652, BW1653, BW1654, BW1655, BW1656, BW1657, BW1658, BW1659, BW1660, BW1661, BW1662, BW1663, BW1664,
			BW1665, BW1666, BW1667, BW1668, BW1669, BW1670, BW1671, BW1672, BW1673, BW1674, BW1675, BW1676, BW1677, BW1678, BW1679, BW1680, BW1681, BW1682, BW1683, BW1684, BW1685, BW1686, BW1687, BW1688, BW1689, BW1690, BW1691, BW1692, BW1693, BW1694, BW1695, BW1696, BW1697, BW1698, BW1699, BW1700, BW1701, BW1702, BW1703, BW1704, BW1705, BW1706, BW1707, BW1708, BW1709, BW1710, BW1711, BW1712, BW1713, BW1714, BW1715, BW1716, BW1717, BW1718, BW1719, BW1720, BW1721, BW1722, BW1723, BW1724, BW1725, BW1726, BW1727, BW1728, BW1729, BW1730, BW1731, BW1732, BW1733, BW1734, BW1735, BW1736, BW1737, BW1738, BW1739, BW1740, BW1741, BW1742, BW1743, BW1744, BW1745, BW1746, BW1747, BW1748, BW1749, BW1750, BW1751, BW1752, BW1753, BW1754, BW1755, BW1756, BW1757, BW1758, BW1759, BW1760, BW1761, BW1762, BW1763, BW1764, BW1765, BW1766, BW1767, BW1768, BW1769, BW1770, BW1771, BW1772, BW1773, BW1774, BW1775, BW1776, BW1777, BW1778, BW1779, BW1780, BW1781, BW1782, BW1783, BW1784, BW1785, BW1786, BW1787, BW1788, BW1789, BW1790, BW1791, BW1792,
			BW1793, BW1794, BW1795, BW1796, BW1797, BW1798, BW1799, BW1800, BW1801, BW1802, BW1803, BW1804, BW1805, BW1806, BW1807, BW1808, BW1809, BW1810, BW1811, BW1812, BW1813, BW1814, BW1815, BW1816, BW1817, BW1818, BW1819, BW1820, BW1821, BW1822, BW1823, BW1824, BW1825, BW1826, BW1827, BW1828, BW1829, BW1830, BW1831, BW1832, BW1833, BW1834, BW1835, BW1836, BW1837, BW1838, BW1839, BW1840, BW1841, BW1842, BW1843, BW1844, BW1845, BW1846, BW1847, BW1848, BW1849, BW1850, BW1851, BW1852, BW1853, BW1854, BW1855, BW1856, BW1857, BW1858, BW1859, BW1860, BW1861, BW1862, BW1863, BW1864, BW1865, BW1866, BW1867, BW1868, BW1869, BW1870, BW1871, BW1872, BW1873, BW1874, BW1875, BW1876, BW1877, BW1878, BW1879, BW1880, BW1881, BW1882, BW1883, BW1884, BW1885, BW1886, BW1887, BW1888, BW1889, BW1890, BW1891, BW1892, BW1893, BW1894, BW1895, BW1896, BW1897, BW1898, BW1899, BW1900, BW1901, BW1902, BW1903, BW1904, BW1905, BW1906, BW1907, BW1908, BW1909, BW1910, BW1911, BW1912, BW1913, BW1914, BW1915, BW1916, BW1917, BW1918, BW1919, BW1920,
			BW1921, BW1922, BW1923, BW1924, BW1925, BW1926, BW1927, BW1928, BW1929, BW1930, BW1931, BW1932, BW1933, BW1934, BW1935, BW1936, BW1937, BW1938, BW1939, BW1940, BW1941, BW1942, BW1943, BW1944, BW1945, BW1946, BW1947, BW1948, BW1949, BW1950, BW1951, BW1952, BW1953, BW1954, BW1955, BW1956, BW1957, BW1958, BW1959, BW1960, BW1961, BW1962, BW1963, BW1964, BW1965, BW1966, BW1967, BW1968, BW1969, BW1970, BW1971, BW1972, BW1973, BW1974, BW1975, BW1976, BW1977, BW1978, BW1979, BW1980, BW1981, BW1982, BW1983, BW1984, BW1985, BW1986, BW1987, BW1988, BW1989, BW1990, BW1991, BW1992, BW1993, BW1994, BW1995, BW1996, BW1997, BW1998, BW1999, BW2000, BW2001, BW2002, BW2003, BW2004, BW2005, BW2006, BW2007, BW2008, BW2009, BW2010, BW2011, BW2012, BW2013, BW2014, BW2015, BW2016, BW2017, BW2018, BW2019, BW2020, BW2021, BW2022, BW2023, BW2024, BW2025, BW2026, BW2027, BW2028, BW2029, BW2030, BW2031, BW2032, BW2033, BW2034, BW2035, BW2036, BW2037, BW2038, BW2039, BW2040, BW2041, BW2042, BW2043, BW2044, BW2045, BW2046, BW2047, BW2048,
		]);
	
	
	
	
	define_integer! (pub INTEGER_0_255, (0 ..= 255), IntegerFormat::Decimal);
	define_integer! (pub INTEGER_2_253, (2 ..= 253), IntegerFormat::Decimal);
	
	define_integer! (pub INTEGER_0_31, (0 ..= 31), IntegerFormat::Decimal);
	define_integer! (pub INTEGER_1_30, (1 ..= 30), IntegerFormat::Decimal);
	
	define_integer! (pub INTEGER_8B_HEX, (0 ..= 255), IntegerFormat::HexPadded (2));
	
	define_integer! (pub UUID_ANY_FIELD_1, (0 ..= ((1 << 32) - 1)), IntegerFormat::HexPadded (8));
	define_integer! (pub UUID_ANY_FIELD_2, (0 ..= ((1 << 16) - 1)), IntegerFormat::HexPadded (4));
	define_integer! (pub UUID_ANY_FIELD_5, (0 ..= ((1 << 48) - 1)), IntegerFormat::HexPadded (12));
	define_integer! (pub UUID_V4_FIELD_3, (((0b0100 << 12) + 0) ..= ((0b0100 << 12) + (1 << 12) - 1)), IntegerFormat::HexPadded (4));
	define_integer! (pub UUID_V4_FIELD_4, (((0b10 << 14) + 0) ..= ((0b10 << 14) + (1 << 14) - 1)), IntegerFormat::HexPadded (4));
	
	
	
	
	define_bytes! (pub BYTES_HEX, BytesFormat::Hex, ( 512 : 1 ));
	
	
	
	
	// NOTE:  => https://docs.rs/chrono/latest/chrono/format/strftime/
	define_timestamp! (pub TIMESTAMP_YEAR, TimestampFormat::Strftime ("%Y", true));
	define_timestamp! (pub TIMESTAMP_MONTH, TimestampFormat::Strftime ("%m", true));
	define_timestamp! (pub TIMESTAMP_DAY, TimestampFormat::Strftime ("%d", true));
	define_timestamp! (pub TIMESTAMP_ISO_DATE, TimestampFormat::Strftime ("%Y-%m-%d", true));
	define_timestamp! (pub TIMESTAMP_ISO_TIME, TimestampFormat::Strftime ("%H-%M-%S", true));
	define_timestamp! (pub TIMESTAMP_ISO_DATETIME, TimestampFormat::Strftime ("%Y-%m-%d-%H-%M-%S", true));
	define_timestamp! (pub TIMESTAMP_SECONDS_DEC, TimestampFormat::Decimal (0, 1_000_000_000, 0, 0));
	define_timestamp! (pub TIMESTAMP_SECONDS_HEX, TimestampFormat::Hex (0, 1_000_000_000, 0, 10));
	define_timestamp! (pub TIMESTAMP_NANOSECONDS_DEC, TimestampFormat::Decimal (0, 0, 0, 0));
	define_timestamp! (pub TIMESTAMP_NANOSECONDS_HEX, TimestampFormat::Hex (0, 0, 0, 18));
	define_timestamp! (pub TIMESTAMP_FLAKE_SECONDS_DEC, TimestampFormat::Decimal (946684800 * 1_000_000_000, 1_000_000_000, 0, 0));
	define_timestamp! (pub TIMESTAMP_FLAKE_SECONDS_HEX, TimestampFormat::Hex (946684800 * 1_000_000_000, 1_000_000_000, 0, 8));
}




pub mod tokens {
	
	use super::*;
	
	
	
	
	macro_rules! define_sequence {
		( $_visibility : vis $_pattern : ident, $_identifier : literal, [ $( $_element : expr, )* ], $_separator : expr ) => {
			::paste::paste! {
				
				static [< _ $_pattern __SEQUENCE >] : &[Rb<TokenPattern>] = &[ $(
						Rb::new_static ($_element),
					)* ];
				
				static [< _ $_pattern __NO_NAME >] : &TokenPattern = & TokenPattern::Sequence (RbList::from_static ( [< _ $_pattern __SEQUENCE >] ), $_separator);
				$_visibility static [< $_pattern >] : &TokenPattern = & TokenPattern::Named ($_identifier, Rb::new_static ( [< _ $_pattern __NO_NAME >] ));
			}
		};
	}
	
	
	macro_rules! define_repeat {
		
		( $_visibility : vis $_pattern : ident, $_identifier : literal, $_element : expr, $_separator : expr, ( $_length : tt : $_each : tt ) ) => {
			macros::__count_call_with! ( [ $_length : $_each ] => define_repeat! ($_visibility $_pattern, $_identifier, $_element, $_separator, ));
		};
		
		( $_visibility : vis $_pattern : ident, $_identifier : literal, $_element : expr, $_separator : expr, [ $( $_count : literal, )* ] ) => {
			::paste::paste! {
				
				$(
					static [< _ $_pattern _ $_count __NO_NAME >] : &TokenPattern = & TokenPattern::Repeat (Rb::new_static ($_element), $_separator, $_count);
					$_visibility static [< $_pattern _ $_count >] : &TokenPattern = & TokenPattern::Named (concat! ($_identifier, ":", $_count), Rb::new_static ( [< _ $_pattern _ $_count __NO_NAME >] ));
				)*
				
				$_visibility static [< $_pattern _ALL >] : &[Rb<TokenPattern>] = &[ $(
						Rb::new_static ( [< $_pattern _ $_count >] ),
					)* ];
			}
		};
	}
	
	
	macro_rules! define_bytes {
		
		( $_visibility : vis $_pattern : ident, $_identifier : literal, $_glyph : ident, ( $_length : tt : $_each : tt ) ) => {
			macros::__count_call_with! ( [ $_length : $_each ] => define_bytes! ($_visibility $_pattern, $_identifier, $_glyph, ));
		};
		
		( $_visibility : vis $_pattern : ident, $_identifier : literal, $_glyph : ident, [ $( $_count : literal, )* ] ) => {
			::paste::paste! {
				
				$(
					$_visibility static [< $_pattern _ $_count >] : &TokenPattern = & TokenPattern::Named (concat! ($_identifier, ":", $_count), Rb::new_static ( glyphs::[< $_glyph _ $_count _TOKEN >] ));
				)*
				
				$_visibility static [< $_pattern _ALL >] : &[Rb<TokenPattern>] = &[ $(
						Rb::new_static ( [< $_pattern _ $_count >] ),
					)* ];
			}
		};
	}
	
	
	macro_rules! define_named {
		( $_visibility : vis $_pattern : ident, $_identifier : literal, $_wrapped : expr ) => {
			::paste::paste! {
				
				$_visibility static $_pattern : &TokenPattern = & TokenPattern::Named ($_identifier, Rb::new_static ( $_wrapped ));
			}
		}
	}
	
	
	macro_rules! define_constant {
		( $_visibility : vis $_constant : ident, $_variant : ident, $_text : expr ) => {
			::paste::paste! {
				
				static [< _ $_constant _TEXT >] : &Text = & Text::$_variant ($_text);
				
				$_visibility static [< $_constant _ATOM >] : &AtomPattern = & AtomPattern::Constant (Rb::new_static ( [< _ $_constant _TEXT >] ));
				$_visibility static [< $_constant _TOKEN >] : &TokenPattern = & TokenPattern::Atom (Rb::new_static ( [< $_constant _ATOM >] ));
			}
		};
	}
	
	
	
	
	define_repeat! (pub DIGITS_BASE10, "digits-base10", glyphs::DIGIT_BASE10_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	
	define_repeat! (pub DIGITS_BASE2, "digits-base2", glyphs::DIGIT_BASE2_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_8_PATTERN), (256 : 8));
	define_repeat! (pub DIGITS_BASE8, "digits-base8", glyphs::DIGIT_BASE8_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	
	define_repeat! (pub DIGITS_BASE16, "digits-base16", glyphs::DIGIT_BASE16_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	
	define_repeat! (pub DIGITS_BASE32_HEX, "digits-base32-hex", glyphs::DIGIT_BASE32_HEX_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	define_repeat! (pub DIGITS_BASE32_RFC, "digits-base32-rfc", glyphs::DIGIT_BASE32_RFC_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	
	define_repeat! (pub DIGITS_BASE64_URL, "digits-base64-url", glyphs::DIGIT_BASE64_URL_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	define_repeat! (pub DIGITS_BASE64_RFC, "digits-base64-rfc", glyphs::DIGIT_BASE64_RFC_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	
	define_repeat! (pub DIGITS_BASE58, "digits-base58", glyphs::DIGIT_BASE58_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	
	define_repeat! (pub DIGITS_BECH32, "digits-bech32", glyphs::DIGIT_BECH32_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	
	define_repeat! (pub DIGITS_Z85, "digits-z85", glyphs::DIGIT_Z85_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_5_PATTERN), (260 : 5));
	
	
	
	
	define_repeat! (pub ASCII_LETTER_LOWER, "ascii-lower", glyphs::ASCII_LETTER_LOWER_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	define_repeat! (pub ASCII_LETTER_UPPER, "ascii-upper", glyphs::ASCII_LETTER_UPPER_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	define_repeat! (pub ASCII_LETTER_MIXED, "ascii-mixed", glyphs::ASCII_LETTER_MIXED_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	
	define_repeat! (pub ASCII_SYMBOLS, "ascii-symbols", glyphs::ASCII_SYMBOL_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	define_repeat! (pub ASCII_PRINTABLE, "ascii-any", glyphs::ASCII_PRINTABLE_TOKEN, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_EACH_4_PATTERN), (256 : 4));
	
	
	
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_LOWER_WORD, "cv-lower-word", [
			glyphs::ASCII_CONSONANT_LOWER_TOKEN,
			glyphs::ASCII_VOWEL_LOWER_TOKEN,
			glyphs::ASCII_CONSONANT_LOWER_TOKEN,
			glyphs::ASCII_VOWEL_LOWER_TOKEN,
		], Rb::new_static (separators::NONE_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_UPPER_WORD, "cv-upper-word", [
			glyphs::ASCII_CONSONANT_UPPER_TOKEN,
			glyphs::ASCII_VOWEL_UPPER_TOKEN,
			glyphs::ASCII_CONSONANT_UPPER_TOKEN,
			glyphs::ASCII_VOWEL_UPPER_TOKEN,
		], Rb::new_static (separators::NONE_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_MIXED_WORD, "cv-mixed-word", [
			glyphs::ASCII_CONSONANT_MIXED_TOKEN,
			glyphs::ASCII_VOWEL_MIXED_TOKEN,
			glyphs::ASCII_CONSONANT_MIXED_TOKEN,
			glyphs::ASCII_VOWEL_MIXED_TOKEN,
		], Rb::new_static (separators::NONE_PATTERN));
	
	define_repeat! (pub ASCII_CONSONANT_VOWEL_LOWER, "cv-lower", ASCII_CONSONANT_VOWEL_LOWER_WORD, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN), (64 : 1));
	define_repeat! (pub ASCII_CONSONANT_VOWEL_UPPER, "cv-upper", ASCII_CONSONANT_VOWEL_UPPER_WORD, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN), (64 : 1));
	define_repeat! (pub ASCII_CONSONANT_VOWEL_MIXED, "cv-mixed", ASCII_CONSONANT_VOWEL_MIXED_WORD, Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN), (64 : 1));
	
	
	
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_WORD, "cv-plus-a-word", [
			glyphs::ASCII_CONSONANT_UPPER_TOKEN,
			glyphs::ASCII_VOWEL_UPPER_TOKEN,
			glyphs::DIGIT_BASE10_TOKEN,
			glyphs::DIGIT_BASE10_TOKEN,
		], Rb::new_static (separators::NONE_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_WORD, "cv-plus-b-word", [
			glyphs::ASCII_CONSONANT_UPPER_TOKEN,
			glyphs::ASCII_VOWEL_UPPER_TOKEN,
			glyphs::DIGIT_BASE10_TOKEN,
			glyphs::ASCII_SYMBOL_TOKEN,
		], Rb::new_static (separators::NONE_PATTERN));
	
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_2, "cv-plus-a:3", [ ASCII_CONSONANT_VOWEL_LOWER_1, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_2, "cv-plus-b:3", [ ASCII_CONSONANT_VOWEL_LOWER_1, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_3, "cv-plus-a:3", [ ASCII_CONSONANT_VOWEL_LOWER_2, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_3, "cv-plus-b:3", [ ASCII_CONSONANT_VOWEL_LOWER_2, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_4, "cv-plus-a:4", [ ASCII_CONSONANT_VOWEL_LOWER_3, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_4, "cv-plus-b:4", [ ASCII_CONSONANT_VOWEL_LOWER_3, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_5, "cv-plus-a:5", [ ASCII_CONSONANT_VOWEL_LOWER_4, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_5, "cv-plus-b:5", [ ASCII_CONSONANT_VOWEL_LOWER_4, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_6, "cv-plus-a:6", [ ASCII_CONSONANT_VOWEL_LOWER_5, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_6, "cv-plus-b:6", [ ASCII_CONSONANT_VOWEL_LOWER_5, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_7, "cv-plus-a:7", [ ASCII_CONSONANT_VOWEL_LOWER_6, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_7, "cv-plus-b:7", [ ASCII_CONSONANT_VOWEL_LOWER_6, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_8, "cv-plus-a:8", [ ASCII_CONSONANT_VOWEL_LOWER_7, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_8, "cv-plus-b:8", [ ASCII_CONSONANT_VOWEL_LOWER_7, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_9, "cv-plus-a:9", [ ASCII_CONSONANT_VOWEL_LOWER_8, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_9, "cv-plus-b:9", [ ASCII_CONSONANT_VOWEL_LOWER_8, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_10, "cv-plus-a:10", [ ASCII_CONSONANT_VOWEL_LOWER_9, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_10, "cv-plus-b:10", [ ASCII_CONSONANT_VOWEL_LOWER_9, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_11, "cv-plus-a:11", [ ASCII_CONSONANT_VOWEL_LOWER_10, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_11, "cv-plus-b:11", [ ASCII_CONSONANT_VOWEL_LOWER_10, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_12, "cv-plus-a:12", [ ASCII_CONSONANT_VOWEL_LOWER_11, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_12, "cv-plus-b:12", [ ASCII_CONSONANT_VOWEL_LOWER_11, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_13, "cv-plus-a:13", [ ASCII_CONSONANT_VOWEL_LOWER_12, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_13, "cv-plus-b:13", [ ASCII_CONSONANT_VOWEL_LOWER_12, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_14, "cv-plus-a:14", [ ASCII_CONSONANT_VOWEL_LOWER_13, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_14, "cv-plus-b:14", [ ASCII_CONSONANT_VOWEL_LOWER_13, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_15, "cv-plus-a:15", [ ASCII_CONSONANT_VOWEL_LOWER_14, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_15, "cv-plus-b:15", [ ASCII_CONSONANT_VOWEL_LOWER_14, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_A_16, "cv-plus-a:16", [ ASCII_CONSONANT_VOWEL_LOWER_15, ASCII_CONSONANT_VOWEL_PLUS_A_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub ASCII_CONSONANT_VOWEL_PLUS_B_16, "cv-plus-b:16", [ ASCII_CONSONANT_VOWEL_LOWER_15, ASCII_CONSONANT_VOWEL_PLUS_B_WORD, ], Rb::new_static (separators::SPACE_OPTIONAL_INFIX_PATTERN));
	
	
	pub static ASCII_CONSONANT_VOWEL_PLUS_ALL : &[Rb<TokenPattern>] = &[
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_2), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_2),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_3), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_3),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_4), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_4),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_5), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_5),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_6), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_6),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_7), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_7),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_8), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_8),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_9), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_9),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_10), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_10),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_11), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_11),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_12), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_12),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_13), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_13),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_14), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_14),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_15), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_15),
			Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_A_16), Rb::new_static (ASCII_CONSONANT_VOWEL_PLUS_B_16),
		];
	
	
	
	
	define_sequence! (pub PROQUINT_LOWER_WORD, "proquint-lower-word", [
			glyphs::PROQUINT_CONSONANT_LOWER_TOKEN,
			glyphs::PROQUINT_VOWEL_LOWER_TOKEN,
			glyphs::PROQUINT_CONSONANT_LOWER_TOKEN,
			glyphs::PROQUINT_VOWEL_LOWER_TOKEN,
			glyphs::PROQUINT_CONSONANT_LOWER_TOKEN,
		], Rb::new_static (separators::NONE_PATTERN));
	
	define_sequence! (pub PROQUINT_UPPER_WORD, "proquint-upper-word", [
			glyphs::PROQUINT_CONSONANT_UPPER_TOKEN,
			glyphs::PROQUINT_VOWEL_UPPER_TOKEN,
			glyphs::PROQUINT_CONSONANT_UPPER_TOKEN,
			glyphs::PROQUINT_VOWEL_UPPER_TOKEN,
			glyphs::PROQUINT_CONSONANT_UPPER_TOKEN,
		], Rb::new_static (separators::NONE_PATTERN));
	
	define_repeat! (pub PROQUINT_LOWER, "proquint-lower", PROQUINT_LOWER_WORD, Rb::new_static (separators::SPACE_MANDATORY_INFIX_PATTERN), (64 : 1));
	define_repeat! (pub PROQUINT_UPPER, "proquint-upper", PROQUINT_UPPER_WORD, Rb::new_static (separators::SPACE_MANDATORY_INFIX_PATTERN), (64 : 1));
	
	
	
	
	define_sequence! (pub MNEMONIC_TUPLE, "mnemonic-tuple", [
			glyphs::MNEMONIC_WORD_TOKEN,
			glyphs::MNEMONIC_WORD_TOKEN,
			glyphs::MNEMONIC_WORD_TOKEN,
		], Rb::new_static (separators::SPACE_MANDATORY_INFIX_PATTERN));
	
	define_repeat! (pub MNEMONIC, "mnemonic", MNEMONIC_TUPLE, Rb::new_static (separators::SPACE_HYPHEN_SPACE_MANDATORY_INFIX_PATTERN), (66 : 1));
	
	
	
	
	define_sequence! (pub BIP0039_TUPLE, "bip0039-tuple", [
			glyphs::BIP0039_WORD_TOKEN,
			glyphs::BIP0039_WORD_TOKEN,
			glyphs::BIP0039_WORD_TOKEN,
		], Rb::new_static (separators::SPACE_MANDATORY_INFIX_PATTERN));
	
	define_repeat! (pub BIP0039, "bip0039", BIP0039_TUPLE, Rb::new_static (separators::SPACE_HYPHEN_SPACE_MANDATORY_INFIX_PATTERN), (66 : 1));
	
	
	
	
	define_sequence! (pub UUID_V4, "uuid-v4", [
			glyphs::UUID_ANY_FIELD_1_TOKEN,
			glyphs::UUID_ANY_FIELD_2_TOKEN,
			glyphs::UUID_V4_FIELD_3_TOKEN,
			glyphs::UUID_V4_FIELD_4_TOKEN,
			glyphs::UUID_ANY_FIELD_5_TOKEN,
		], Rb::new_static (separators::HYPHEN_MANDATORY_INFIX_PATTERN));
	
	pub static UUID_ALL : &[Rb<TokenPattern>] = &[
			Rb::new_static (UUID_V4),
		];
	
	
	
	
	define_constant! (IP_127_PREFIX, Str, "127");
	define_constant! (IP_10_PREFIX, Str, "10");
	define_constant! (IP_172_PREFIX, Str, "172");
	define_constant! (IP_192_A_PREFIX, Str, "192");
	define_constant! (IP_192_B_PREFIX, Str, "168");
	define_constant! (IP_MAC_PREFIX, Str, "02");
	
	define_sequence! (pub IP_127, "ip-127", [
			IP_127_PREFIX_TOKEN,
			glyphs::INTEGER_2_253_TOKEN,
			glyphs::INTEGER_2_253_TOKEN,
			glyphs::INTEGER_2_253_TOKEN,
		], Rb::new_static (separators::DOT_MANDATORY_INFIX_PATTERN));
	
	define_sequence! (pub IP_10, "ip-10", [
			IP_10_PREFIX_TOKEN,
			glyphs::INTEGER_2_253_TOKEN,
			glyphs::INTEGER_2_253_TOKEN,
			glyphs::INTEGER_2_253_TOKEN,
		], Rb::new_static (separators::DOT_MANDATORY_INFIX_PATTERN));
	
	define_sequence! (pub IP_172, "ip-172", [
			IP_172_PREFIX_TOKEN,
			glyphs::INTEGER_1_30_TOKEN,
			glyphs::INTEGER_2_253_TOKEN,
			glyphs::INTEGER_2_253_TOKEN,
		], Rb::new_static (separators::DOT_MANDATORY_INFIX_PATTERN));
	
	define_sequence! (pub IP_192, "ip-192", [
			IP_192_A_PREFIX_TOKEN,
			IP_192_B_PREFIX_TOKEN,
			glyphs::INTEGER_2_253_TOKEN,
			glyphs::INTEGER_2_253_TOKEN,
		], Rb::new_static (separators::DOT_MANDATORY_INFIX_PATTERN));
	
	define_sequence! (pub IP_MAC, "ip-mac", [
			IP_MAC_PREFIX_TOKEN,
			glyphs::INTEGER_8B_HEX_TOKEN,
			glyphs::INTEGER_8B_HEX_TOKEN,
			glyphs::INTEGER_8B_HEX_TOKEN,
			glyphs::INTEGER_8B_HEX_TOKEN,
			glyphs::INTEGER_8B_HEX_TOKEN,
		], Rb::new_static (separators::COLON_MANDATORY_INFIX_PATTERN));
	
	pub static IP_ALL : &[Rb<TokenPattern>] = &[
			Rb::new_static (IP_127),
			Rb::new_static (IP_10),
			Rb::new_static (IP_172),
			Rb::new_static (IP_192),
			Rb::new_static (IP_MAC),
		];
	
	
	
	
	define_bytes! (pub BYTES_HEX, "bytes-hex", BYTES_HEX, ( 512 : 4 ));
	
	
	
	
	define_named! (pub TIMESTAMP_ISO_DATETIME, "timestamp-iso", glyphs::TIMESTAMP_ISO_DATETIME_TOKEN);
	define_named! (pub TIMESTAMP_SECONDS_DEC, "timestamp-sec", glyphs::TIMESTAMP_SECONDS_DEC_TOKEN);
	define_named! (pub TIMESTAMP_SECONDS_HEX, "timestamp-sec-hex", glyphs::TIMESTAMP_SECONDS_HEX_TOKEN);
	define_named! (pub TIMESTAMP_NANOSECONDS_DEC, "timestamp-nano", glyphs::TIMESTAMP_NANOSECONDS_DEC_TOKEN);
	define_named! (pub TIMESTAMP_NANOSECONDS_HEX, "timestamp-nano-hex", glyphs::TIMESTAMP_NANOSECONDS_HEX_TOKEN);
	define_named! (pub TIMESTAMP_FLAKE_SECONDS_DEC, "timestamp-flake", glyphs::TIMESTAMP_FLAKE_SECONDS_DEC_TOKEN);
	define_named! (pub TIMESTAMP_FLAKE_SECONDS_HEX, "timestamp-flake-hex", glyphs::TIMESTAMP_FLAKE_SECONDS_HEX_TOKEN);
	
	define_sequence! (pub FLAKE_SECONDS_4, "flake:4", [ glyphs::TIMESTAMP_FLAKE_SECONDS_HEX_TOKEN, glyphs::BYTES_HEX_4_TOKEN, ], Rb::new_static (separators::HYPHEN_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub FLAKE_SECONDS_6, "flake:6", [ glyphs::TIMESTAMP_FLAKE_SECONDS_HEX_TOKEN, glyphs::BYTES_HEX_6_TOKEN, ], Rb::new_static (separators::HYPHEN_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub FLAKE_SECONDS_8, "flake:8", [ glyphs::TIMESTAMP_FLAKE_SECONDS_HEX_TOKEN, glyphs::BYTES_HEX_8_TOKEN, ], Rb::new_static (separators::HYPHEN_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub FLAKE_SECONDS_10, "flake:10", [ glyphs::TIMESTAMP_FLAKE_SECONDS_HEX_TOKEN, glyphs::BYTES_HEX_10_TOKEN, ], Rb::new_static (separators::HYPHEN_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub FLAKE_SECONDS_12, "flake:12", [ glyphs::TIMESTAMP_FLAKE_SECONDS_HEX_TOKEN, glyphs::BYTES_HEX_12_TOKEN, ], Rb::new_static (separators::HYPHEN_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub FLAKE_SECONDS_14, "flake:14", [ glyphs::TIMESTAMP_FLAKE_SECONDS_HEX_TOKEN, glyphs::BYTES_HEX_14_TOKEN, ], Rb::new_static (separators::HYPHEN_OPTIONAL_INFIX_PATTERN));
	define_sequence! (pub FLAKE_SECONDS_16, "flake:16", [ glyphs::TIMESTAMP_FLAKE_SECONDS_HEX_TOKEN, glyphs::BYTES_HEX_16_TOKEN, ], Rb::new_static (separators::HYPHEN_OPTIONAL_INFIX_PATTERN));
	
	pub static TIMESTAMP_ALL : &[Rb<TokenPattern>] = &[
			Rb::new_static (TIMESTAMP_ISO_DATETIME),
			Rb::new_static (TIMESTAMP_SECONDS_DEC),
			Rb::new_static (TIMESTAMP_SECONDS_HEX),
			Rb::new_static (TIMESTAMP_NANOSECONDS_DEC),
			Rb::new_static (TIMESTAMP_NANOSECONDS_HEX),
			Rb::new_static (TIMESTAMP_FLAKE_SECONDS_DEC),
			Rb::new_static (TIMESTAMP_FLAKE_SECONDS_HEX),
			Rb::new_static (FLAKE_SECONDS_4),
			Rb::new_static (FLAKE_SECONDS_6),
			Rb::new_static (FLAKE_SECONDS_8),
			Rb::new_static (FLAKE_SECONDS_10),
			Rb::new_static (FLAKE_SECONDS_12),
			Rb::new_static (FLAKE_SECONDS_14),
			Rb::new_static (FLAKE_SECONDS_16),
		];
	
	
	
	
	pub static ALL : &[&[Rb<TokenPattern>]] = &[
			
			DIGITS_BASE2_ALL,
			DIGITS_BASE8_ALL,
			DIGITS_BASE10_ALL,
			DIGITS_BASE16_ALL,
			DIGITS_BASE32_HEX_ALL,
			DIGITS_BASE32_RFC_ALL,
			DIGITS_BASE64_URL_ALL,
			DIGITS_BASE64_RFC_ALL,
			DIGITS_BASE58_ALL,
			DIGITS_BECH32_ALL,
			DIGITS_Z85_ALL,
			
			ASCII_LETTER_LOWER_ALL,
			ASCII_LETTER_UPPER_ALL,
			ASCII_LETTER_MIXED_ALL,
			
			ASCII_SYMBOLS_ALL,
			ASCII_PRINTABLE_ALL,
			
			ASCII_CONSONANT_VOWEL_LOWER_ALL,
			ASCII_CONSONANT_VOWEL_UPPER_ALL,
			ASCII_CONSONANT_VOWEL_MIXED_ALL,
			ASCII_CONSONANT_VOWEL_PLUS_ALL,
			
			PROQUINT_LOWER_ALL,
			PROQUINT_UPPER_ALL,
			
			MNEMONIC_ALL,
			BIP0039_ALL,
			
			UUID_ALL,
			
			IP_ALL,
			
			BYTES_HEX_ALL,
			
			TIMESTAMP_ALL,
			
		];
}




pub mod separators {
	
	use super::*;
	
	
	
	
	macro_rules! define_separator {
		( $_visibility : vis $_pattern : ident, $_variant : ident, $_text : expr, infix, ( $_length : tt : $_each : tt ) ) => {
			macros::__count_call_with! ( [ $_length : $_each ] => define_separator! ($_visibility $_pattern, $_variant, $_text, infix, ));
		};
		( $_visibility : vis $_pattern : ident, $_variant : ident, $_text : expr, infix, [ $( $_infix_each : literal, )* ] ) => {
			::paste::paste! {
				
				static [< _ $_pattern _TEXT >] : &Text = & Text::$_variant ($_text);
				
				$_visibility static [< $_pattern _MANDATORY_SEPARATOR >] : &Separator = & Separator::Mandatory (Rb::new_static ( [< _ $_pattern _TEXT >] ));
				$_visibility static [< $_pattern _OPTIONAL_SEPARATOR >] : &Separator = & Separator::Optional (Rb::new_static ( [< _ $_pattern _TEXT >] ));
				
				$_visibility static [< $_pattern _MANDATORY_INFIX_PATTERN >] : &SeparatorPattern = & SeparatorPattern::Infix (Rb::new_static ( [< $_pattern _MANDATORY_SEPARATOR >] ));
				$_visibility static [< $_pattern _OPTIONAL_INFIX_PATTERN >] : &SeparatorPattern = & SeparatorPattern::Infix (Rb::new_static ( [< $_pattern _OPTIONAL_SEPARATOR >] ));
				
				$(
					$_visibility static [< $_pattern _MANDATORY_INFIX_EACH_ $_infix_each _PATTERN >] : &SeparatorPattern = & SeparatorPattern::InfixEach (Rb::new_static ( [< $_pattern _MANDATORY_SEPARATOR >] ), $_infix_each);
					$_visibility static [< $_pattern _OPTIONAL_INFIX_EACH_ $_infix_each _PATTERN >] : &SeparatorPattern = & SeparatorPattern::InfixEach (Rb::new_static ( [< $_pattern _OPTIONAL_SEPARATOR >] ), $_infix_each);
				)*
			}
		};
	}
	
	
	
	
	pub static NONE_PATTERN : &SeparatorPattern = & SeparatorPattern::None;
	
	
	define_separator! (pub SPACE, Char, ' ', infix, ( 16 : 1 ));
	define_separator! (pub DOT, Char, '.', infix, ( 16 : 1 ));
	define_separator! (pub HYPHEN, Char, '-', infix, ( 16 : 1 ));
	define_separator! (pub COLON, Char, ':', infix, ( 16 : 1 ));
	
	define_separator! (pub SPACE_HYPHEN_SPACE, Str, " - ", infix, ( 16 : 1 ));
}




pub fn all_token_patterns () -> RbList<(String, Rb<TokenPattern>)> {
	
	let mut _collector = Vec::with_capacity (1024);
	
	for _patterns in tokens::ALL.iter () {
		for _pattern in _patterns.iter () {
			match _pattern.as_ref () {
				TokenPattern::Named (_identifier, _) =>
					_collector.push ((String::from (*_identifier), _pattern.clone ())),
				_ =>
					panic! (0xcb0098dd),
			}
		}
	}
	
	RbList::from_vec (_collector)
}


pub fn get_token_pattern (_identifier : &str) -> Option<Rb<TokenPattern>> {
	
	for _patterns in tokens::ALL.iter () {
		for _pattern in _patterns.iter () {
			match _pattern.as_ref () {
				TokenPattern::Named (_identifier_0, _) =>
					if *_identifier_0 == _identifier {
						return Some (_pattern.clone ());
					}
				_ =>
					(),
			}
		}
	}
	
	None
}




pub mod consts {
	
	pub mod ascii {
		// NOTE:  python -c 'for c in range (32, 127) : print ("pub const C%02X : char = %r;" % (c, chr(c)))'
		include! ("./patterns_consts_ascii.in");
	}
	
	pub mod mnemonic {
		// NOTE:  => https://github.com/singpolyma/mnemonicode
		// NOTE:  => https://github.com/mbrubeck/rust-mnemonic
		include! ("./patterns_consts_mnemonic.in");
	}
	
	pub mod bip0039 {
		// NOTE:  => https://en.bitcoin.it/wiki/BIP_0039
		// NOTE:  => https://github.com/maciejhirsz/tiny-bip39
		include! ("./patterns_consts_bip0039.in");
	}
}




pub(crate) mod macros {
	
	// NOTE:  #>  python -c $'print ("macro_rules! __count_list {")\nfor n in range (1, 512 + 1) :\n  for e in range (1, 16 + 1) :\n    if e <= n : print ("( %d, %d )" % (n, e) + "=> { [ " + ", ".join (["%d" % c for c in range (0, n + 1, e) if c != 0]) + ", ] };")\nprint ("}")' >| ./sources/patterns_count_list.in
	include! ("./patterns_count_list.in");
	
	// NOTE:  #>  python -c $'print ("macro_rules! __count_call_each {")\nfor n in range (1, 512 + 1) :\n  for e in range (1, 16 + 1) :\n    if e <= n : print ("( [ %d : %d ] => $c:ident! ( $($p:tt)* ) )" % (n, e) + "=> {\\n" + "\\n".join (["\t$c! ( $($p)* %d );" % c for c in range (0, n + 1, e) if c != 0]) + "\\n};")\nprint ("}")' >| ./sources/patterns_count_call_each.in
	include! ("./patterns_count_call_each.in");
	
	// NOTE:  #>  python -c $'print ("macro_rules! __count_call_with {")\nfor n in range (1, 512 + 1) :\n  for e in range (1, 16 + 1) :\n    if e <= n : print ("( [ %d : %d ] => $c:ident! ( $($p:tt)* ) )" % (n, e) + "=> { $c! ( $($p)* [ " + ", ".join (["%d" % c for c in range (0, n + 1, e) if c != 0]) + ", ] ); };")\nprint ("}")' >| ./sources/patterns_count_call_with.in
	include! ("./patterns_count_call_with.in");
	
	pub(crate) use __count_list;
	pub(crate) use __count_call_each;
	pub(crate) use __count_call_with;
}

