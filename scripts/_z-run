#!/dev/null




::// *


::// cargo / debug / ...
::// cargo / release / ...
::// cargo / doc / ...




<< cargo / debug / check
	exec -- "${ZRUN}" ':: cargo / exec' check "${@}"
!!

<< cargo / release / check
	exec -- "${ZRUN}" ':: cargo / exec' check --release "${@}"
!!


<< cargo / debug / build
	exec -- "${ZRUN}" ':: cargo / exec' build "${@}"
!!

<< cargo / release / build
	exec -- "${ZRUN}" ':: cargo / exec' build --release "${@}"
!!


<< cargo / debug / run
	exec -- "${ZRUN}" ':: cargo / exec' run "${@}"
!!

<< cargo / release / run
	exec -- "${ZRUN}" ':: cargo / exec' run --release "${@}"
!!




<< cargo / debug / run / watch
	exec -- "${ZRUN}" ':: watchexec / exec' ':: cargo / exec' run "${@}"
!!

<< cargo / debug / check / watch
	exec -- "${ZRUN}" ':: watchexec / exec' ':: cargo / exec' check "${@}"
!!




<< cargo / update
	exec -- "${ZRUN}" ':: cargo / exec / local' update "${@}"
!!




<< cargo / doc / build / exports
	exec -- "${ZRUN}" ':: cargo / exec' doc --lib --all-features "${@}"
!!

<< cargo / doc / build / internals
	readarray -t -d $'\n' -- _packages \
		< <( exec -- "${ZRUN}" ':: cargo / doc / packages' ) \
	#
	_arguments=()
	for _package in "${_packages[@]}" ; do
		case "${_package}" in
			( * )
				_arguments+=( --package "${_package%*}" )
			;;
		esac
	done
	set -x
	exec -- "${ZRUN}" ':: cargo / exec' doc --lib --document-private-items "${_arguments[@]}" "${@}"
!!

--<< cargo / doc / packages
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / exec' tree --all-features --edges normal --no-dedupe --format '{p}' --prefix none \
	| cut -f 1,2 -d ' ' \
	| sort -u \
	| sort -u -s -k 1,1 -t ' ' \
	| sed -r -e 's#^([^ ]+) v([^ ]+)$#\1:\2#' \
	#
	"${ZRUN}" ':: cargo / exec' metadata --format-version 1 --no-deps \
	| jq -r '.workspace_members[]' \
	| sort -u \
	| sort -u -s -k 1,1 -t ' ' \
	| sed -r -e 's#^([^ ]+) ([^ ]+) \([^ ]+\)$#\1:\2#' \
	#
!!


<< cargo / doc / open
	
	test "${#}" -eq 0
	
	_switch=remote
	
	case "${_switch}" in
		( local )
			_scratch="${__CARGO_LOCAL__SCRATCH}/${__CARGO_LOCAL__IDENTIFIER}"
		;;
		( remote )
			_scratch="${__CARGO_REMOTE__SCRATCH}/${__CARGO_REMOTE__IDENTIFIER}"
		;;
		( * )
			false -- '[1a224da4]'
		;;
	esac
	
	_docs="${_scratch}/target/doc"
	test -d "${_docs}"
	
	_index="${_docs}/z_tokens/index.html"
	test -f "${_index}"
	
	exec -- x-www "guest:rust--${__CARGO_LOCAL__IDENTIFIER}" open "file://$( exec -- readlink -e -- "${_index}" )"
!!




--<< cargo / exec
	
	_switch=remote
	
	case "${_switch}" in
		( local )
			exec -- "${ZRUN}" ':: cargo / exec / local' "${@}"
		;;
		( remote )
			exec -- "${ZRUN}" ':: cargo / exec / remote' "${@}"
		;;
		( * )
			false -- '[1a224da4]'
		;;
	esac
!!




--<< cargo / exec / local
	
	test -d "${__CARGO_LOCAL__SCRATCH}"
	_scratch="${__CARGO_LOCAL__SCRATCH}/${__CARGO_LOCAL__IDENTIFIER}"
	_executable="${__CARGO_LOCAL__EXECUTABLE}"
	
	if test ! -d "${_scratch}" ; then
		mkdir -m 00700 -- "${_scratch}"
		mkdir -m 00700 -- "${_scratch}/target"
		ln -s -T -- "$( exec -- readlink -e -- ./sources )" "${_scratch}/sources"
	fi
	
	exec -- "${ZRUN}" ':: cargo / exec / any / delegate' \
			"${_scratch}" "${_executable}" \
			"${@}" \
	#
!!


--<< cargo / exec / remote / delegate
	
	test -d "${__CARGO_REMOTE__SCRATCH}"
	_scratch="${__CARGO_REMOTE__SCRATCH}/${__CARGO_REMOTE__IDENTIFIER}"
	_executable="${__CARGO_REMOTE__EXECUTABLE}"
	
	exec -- "${ZRUN}" ':: cargo / exec / any / delegate' \
			"${_scratch}" "${_executable}" \
			"${@}" \
	#
!!


--<< cargo / exec / any / delegate
	
	test "${#}" -ge 2
	_scratch="${1}"
	_executable="${2}"
	shift -- 2
	
	test -d "${_scratch}"
	
	test -f "${_executable}"
	test -x "${_executable}"
	
	_rust_flags=(
			
			-C target-feature=-crt-static
			-C relocation-model=pic
			
			-C linker=clang
			-C link-arg=-fuse-ld=mold
			
			-C force-frame-pointers=yes
			
			# NOTE:  For some reason on 1.65+ the compiler complains about something...
			-A warnings
			
		)
	
	_cargo_environment=(
			
			CARGO_TARGET_DIR="${_scratch}/target"
			CARGO_BUILD_RUSTFLAGS="${_rust_flags[*]}"
			
		#?	RUSTC_BOOTSTRAP=1
			
			PATH="${PATH}"
			USER="${USER}"
			HOME="${HOME}"
			TMPDIR="${TMPDIR}"
			TERM="${TERM}"
			
			LANG=C.UTF-8
			LC_ALL=C.UTF-8
			
		)
	
	renice -n 19 -p "${$}" > /dev/null
	
	cd -- "${_scratch}/sources"
	
	exec -- \
		env -i "${_cargo_environment[@]}" \
		nodaemon \
	"${_executable}" \
			+stable \
			"${@}" \
	#
!!




--<< cargo / exec / remote
	
	"${ZRUN}" \
			--ssh \
			--ssh-target="${__CARGO_REMOTE__SSH_TARGET}" \
			--ssh-workspace=/var/lib/empty \
			':: cargo / exec / remote / prepare' \
	#
	
	"${ZRUN}" \
			':: cargo / exec / remote / synchronize / push' \
	#
	
	exec -- "${ZRUN}" \
			--ssh \
			--ssh-target="${__CARGO_REMOTE__SSH_TARGET}" \
			--ssh-workspace=/var/lib/empty \
			':: cargo / exec / remote / delegate' \
			"${@}" \
	#
!!


--<< cargo / exec / remote / prepare
	
	test "${#}" -eq 0
	
	test -d "${__CARGO_REMOTE__SCRATCH}"
	_scratch="${__CARGO_REMOTE__SCRATCH}/${__CARGO_REMOTE__IDENTIFIER}"
	
	if test ! -d "${_scratch}" ; then
		mkdir -m 00700 -- "${_scratch}"
		mkdir -m 00700 -- "${_scratch}/sources"
		mkdir -m 00700 -- "${_scratch}/target"
		mkdir -m 00700 -- "${_scratch}/.dependencies"
	fi
!!


--<< cargo / exec / remote / synchronize / push
	
	test "${#}" -eq 0
	
	_scratch="${__CARGO_REMOTE__SCRATCH}/${__CARGO_REMOTE__IDENTIFIER}"
	
	_local_sources=./sources
	_remote_sources="${_scratch}/sources"
	
	_local_dependencies=./.dependencies
	_remote_dependencies="${_scratch}/.dependencies"
	
	_rsync_arguments=(
			
			--recursive
			--checksum --checksum-choice md5
			--times --perms
			--chmod D00500,F00400
		#	--itemize-changes
			--copy-unsafe-links
			
			--exclude '.git'
			--exclude 'target'
			
		)
	
	rsync \
			--delete \
			"${_rsync_arguments[@]}" \
			-- \
			"${_local_sources}/" \
			"${__CARGO_REMOTE__SSH_TARGET}:${_remote_sources}/" \
	#
	
	rsync \
			--delete \
			"${_rsync_arguments[@]}" \
			-- \
			"${_local_dependencies}/" \
			"${__CARGO_REMOTE__SSH_TARGET}:${_remote_dependencies}/" \
	#
!!




--<< watchexec / exec
	
	test "${#}" -ge 1
	
	_watchexec_arguments=(
			
			--watch ./sources
			--debounce 250
			--on-busy-update queue
			
			--shell none
			--no-environment
			
			--no-default-ignore
			--no-global-ignore
			--no-project-ignore
			--no-vcs-ignore
			
		)
	
	exec -- \
	watchexec \
			"${_watchexec_arguments[@]}" -- \
	"${ZRUN}" ':: watchexec / exec / delegate' "${@}" \
	#
!!


--<< watchexec / exec / delegate
	
	test "${#}" -ge 1
	
	printf -- '[--]\n\n' >&2
	
	if "${ZRUN}" "${@}" ; then
		printf -- '\n' >&2
	else
		printf -- '\n[ee]  failed!\n' >&2
	fi
	printf -- '[--]\n' >&2
!!




&&?? _/.local.z-run
&&?? ../.git/.local.z-run

