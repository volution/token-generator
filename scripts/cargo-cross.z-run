#!/dev/null




<< cargo / debug / check / cross / all
	exec -- "${ZRUN}" ':: cargo / cross / exec / all' \
			check-targets \
			':: cargo / debug / check' "${@}" \
	#
!!


<< cargo / release / check / cross / all
	exec -- "${ZRUN}" ':: cargo / cross / exec / all' \
			check-targets \
			':: cargo / release / check' "${@}" \
	#
!!


<< cargo / install / check / cross / all
	exec -- "${ZRUN}" ':: cargo / cross / exec / all' \
			check-targets \
			':: cargo / install / check' "${@}" \
	#
!!




<< cargo / debug / build / cross / all
	exec -- "${ZRUN}" ':: cargo / cross / exec / all' \
			build-targets \
			':: cargo / debug / build' "${@}" \
	#
!!


<< cargo / release / build / cross / all
	exec -- "${ZRUN}" ':: cargo / cross / exec / all' \
			build-targets \
			':: cargo / release / build' "${@}" \
	#
!!


<< cargo / install / build / cross / all
	exec -- "${ZRUN}" ':: cargo / cross / exec / all' \
			build-targets \
			':: cargo / install / build' "${@}" \
	#
!!




<< cargo / debug / collect / cross / all
	exec -- "${ZRUN}" ':: cargo / cross / exec / all' \
			no-fetch \
			build-targets \
			':: cargo / debug / collect' "${@}" \
	#
!!


<< cargo / release / collect / cross / all
	exec -- "${ZRUN}" ':: cargo / cross / exec / all' \
			no-fetch \
			build-targets \
			':: cargo / release / collect' "${@}" \
	#
!!




<< cargo / debug / collect / build & cross / all
	exec -- "${ZRUN}" ':: cargo / cross / exec / all' \
			no-fetch \
			build-targets \
			':: cargo / debug / build & collect' "${@}" \
	#
!!


<< cargo / release / collect / build & cross / all
	exec -- "${ZRUN}" ':: cargo / cross / exec / all' \
			no-fetch \
			build-targets \
			':: cargo / release / build & collect' "${@}" \
	#
!!




<< cargo / dependencies / fetch / cross
	export -- __CARGO__CROSS=true
	exec -- "${ZRUN}" ':: cargo / dependencies / fetch' "${@}"
!!




--<< cargo / cross / exec / all
	
	_fetch=true
	if test "${#}" -ge 1 -a "${1}" == no-fetch ; then
		_fetch=false
		shift -- 1
	fi
	
	test "${#}" -ge 2
	_targets="${1}"
	_delegate="${2}"
	shift -- 2
	
	readarray -t -- _targets < <( exec -- "${ZRUN}" ':: cargo / cross / exec / targets' "${_targets}" )
	
	export -- __CARGO__CROSS=true
	
	if test "${_fetch}" == true ; then
		printf -- '[ii]  fetching dependencies...\n' >&2
		"${ZRUN}" ':: cargo / dependencies / fetch'
	fi
	
	_failed_targets=()
	for _target in "${_targets[@]}" ; do
		printf -- '[ii]  executing for target `%s`...\n' "${_target}" >&2
		export -- __CARGO__TARGET="${_target}"
		if ! "${ZRUN}" "${_delegate}" "${@}" ; then
			printf -- '[ee]  failed for target `%s`...\n' "${_target}" >&2
			_failed_targets+=( "${_target}" )
		fi
	done
	
	if test "${#_failed_targets[@]}" -ne 0 ; then
		printf '[--]\n' >&2
		for _target in "${_failed_targets[@]}" ; do
			printf -- '[ee]  failed for target `%s`...\n' "${_target}" >&2
		done
		exit -- 1
	fi
!!




--<< cargo / cross / exec / targets
	test "${#}" -eq 1
	
	_targets=()
	case "${1}" in
		
		( all-targets | check-targets | build-targets | release-targets )
			_targets+=(
					
					native
					
					x86_64-unknown-linux-gnu
					aarch64-unknown-linux-gnu
					arm-unknown-linux-gnueabihf
					
					x86_64-unknown-linux-musl
					aarch64-unknown-linux-musl
					arm-unknown-linux-musleabihf
					
					x86_64-unknown-linux-musl-static
					aarch64-unknown-linux-musl-static
					arm-unknown-linux-musleabihf-static
					
					x86_64-linux-android
					aarch64-linux-android
					
					x86_64-apple-darwin
					aarch64-apple-darwin
					
					x86_64-pc-windows-gnu
					
				)
		;;&
		
		( all-targets | check-targets )
			_targets+=(
					
				#~	x86_64-unknown-freebsd
				#!	aarch64-unknown-freebsd
					
				#!	x86_64-unknown-openbsd
				#!	aarch64-unknown-openbsd
					
				#~	x86_64-pc-windows-msvc
				#~	aarch64-pc-windows-msvc
					
				)
		;;&
		
		( all-targets | check-targets | build-targets | release-targets )
		;;
		
		( * )
			false -- 426bb017
		;;
		
	esac
	
	printf -- '%s\n' "${_targets[@]}"
!!

