#!/dev/null




--<< cargo / exec
	
	_switch=remote
	
	case "${_switch}" in
		( local )
			exec -- "${ZRUN}" ':: cargo / exec / local' "${@}"
		;;
		( remote )
			exec -- "${ZRUN}" ':: cargo / exec / remote' "${@}"
		;;
		( * )
			false -- '[1a224da4]'
		;;
	esac
!!




--<< cargo / exec / local
	
	test -d "${__CARGO_LOCAL__SCRATCH}"
	_scratch="${__CARGO_LOCAL__SCRATCH}/${__CARGO_LOCAL__IDENTIFIER}"
	_executable="${__CARGO_LOCAL__EXECUTABLE}"
	
	if test ! -d "${_scratch}" ; then
		mkdir -m 00700 -- "${_scratch}"
		mkdir -m 00700 -- "${_scratch}/target"
		ln -s -T -- "$( exec -- readlink -e -- ./sources )" "${_scratch}/sources"
	fi
	
	exec -- "${ZRUN}" ':: cargo / exec / any / delegate' \
			"${_scratch}" "${_executable}" \
			"${@}" \
	#
!!




--<< cargo / exec / remote / delegate
	
	test -d "${__CARGO_REMOTE__SCRATCH}"
	_scratch="${__CARGO_REMOTE__SCRATCH}/${__CARGO_REMOTE__IDENTIFIER}"
	_executable="${__CARGO_REMOTE__EXECUTABLE}"
	
	exec -- "${ZRUN}" ':: cargo / exec / any / delegate' \
			"${_scratch}" "${_executable}" \
			"${@}" \
	#
!!




--<< cargo / exec / any / delegate
	
	test "${#}" -ge 3
	_scratch="${1}"
	_executable="${2}"
	_tool="${3}"
	shift -- 3
	
	test -d "${_scratch}"
	
	test -f "${_executable}"
	test -x "${_executable}"
	
	_toolchain=stable
	
	_cross=false
	if test "${__CARGO_CROSS:-false}" == true ; then
		_cross=true
	fi
	if test "${_tool}" == cross ; then
		_cross=true
		test "${#}" -ge 1
		_tool="${1}"
		shift -- 1
	fi
	
	_cargo_flags=()
	_rust_flags=()
	
	case "${_tool}" in
		
		( check )
			_cargo_flags+=(
					--frozen
					--offline
				)
		;;
		
		( build | run )
			_cargo_flags+=(
					--frozen
					--offline
				)
			if test "${_cross}" == false ; then
				_rust_flags+=(
						
						-C target-feature=-crt-static
						-C relocation-model=pic
						-C rpath=no
						
						-C linker=clang
						-C link-arg=-fuse-ld=lld
					#!	-C link-arg=-fuse-ld=mold
						-C link-arg=-Wl,--compress-debug-sections=none
						
						-C link-self-contained=no
						-C prefer-dynamic=no
						-C force-frame-pointers=yes
						
					)
			else
				_rust_flags+=(
						
						-C prefer-dynamic=no
						-C force-frame-pointers=yes
						
					)
				
			fi
		;;
		
		( doc )
			_cargo_flags+=(
					--frozen
					--offline
				)
			_rust_flags+=(
					-A warnings
				)
		;;
		
		( metadata )
			_cargo_flags+=(
					--frozen
					--offline
				)
		;;
		
		( update )
		;;
		( fetch | vendor )
			_cargo_flags+=(
					--locked
				)
		;;
		
		( tree | outdated | license | cyclonedx )
		;;
		
		( * )
			printf -- '[ee]  invalid tool `%s`;  aborting!\n' "${_tool}" >&2
			exit -- 1
		;;
	esac
	
	export -- __RUST_FLAGS="${_rust_flags[*]}"
	
	if test "${_cross}" == false ; then
		exec -- "${ZRUN}" ':: cargo / exec / any / native' "${_scratch}" "${_executable}" "${_toolchain}" "${_tool}" "${_cargo_flags[@]}" "${@}"
	else
		exec -- "${ZRUN}" ':: cargo / exec / any / podman' "${_scratch}" "${_toolchain}" "${_tool}" "${_cargo_flags[@]}" "${@}"
	fi
!!




--<< cargo / exec / any / native
	
	test "${#}" -ge 4
	_scratch="${1}"
	_executable="${2}"
	_toolchain="${3}"
	_tool="${4}"
	shift -- 4
	
	if test -n "${__CARGO_HOME:-}" ; then
		_cargo_home="${__CARGO_HOME}"
	else
		_cargo_home="${HOME}/.cargo"
	fi
	_cargo_home="$( exec -- readlink -e -- "${_cargo_home}" )"
	
	_environment=(
			
			CARGO_HOME="${_cargo_home}"
			CARGO_TARGET_DIR="${_scratch}/target"
			CARGO_BUILD_RUSTFLAGS="${__RUST_FLAGS:-}"
			
			PATH="${PATH}"
			USER="${USER}"
			HOME="${HOME}"
			TMPDIR="${TMPDIR}"
			TERM="${TERM}"
			
			LANG=C.UTF-8
			LC_ALL=C.UTF-8
			
		)
	
	cd -- "${_scratch}/sources"
	
	exec -- \
	\
		nodaemon \
		nice -n 19 -- \
	\
		env -i "${_environment[@]}" \
	"${_executable}" \
			"+${_toolchain}" \
			"${_tool}" \
			"${@}" \
	#
!!




--<< cargo / exec / any / podman
	
	test "${#}" -ge 3
	_scratch="${1}"
	_toolchain="${2}"
	_tool="${3}"
	shift -- 3
	
	_executable=/opt/cargo/bin/cargo
	
	_environment=(
			
			CARGO_TARGET_DIR="/rust/target"
			CARGO_BUILD_RUSTFLAGS="${__RUST_FLAGS:-}"
			
		)
	
	test -d "${_scratch}"
	test -d "${_scratch}/sources"
	
	if test ! -e "${_scratch}/cross" ; then
		mkdir -- "${_scratch}/cross"
		mkdir -- "${_scratch}/cross/target"
		mkdir -- "${_scratch}/cross/registry"
		mkdir -- "${_scratch}/cross/registry/git"
		mkdir -- "${_scratch}/cross/tmp"
	fi
	
	test -d "${_scratch}/cross/target"
	test -d "${_scratch}/cross/registry"
	test -d "${_scratch}/cross/registry/git"
	
	exec -- \
	\
		systemd-run --user --pty --wait --collect --quiet -- \
	\
		nodaemon \
		nice -n 19 -- \
	\
		podman container run \
			--interactive \
			--tty \
			--init \
			--workdir /rust/sources \
			--volume "${_scratch}/sources":/rust/sources:ro \
			--volume "${_scratch}/cross/target":/rust/target:rw \
			--volume "${_scratch}/cross/registry":/rust/registry:rw \
			--env TERM \
			--network host \
			--storage-opt overlay.mount_program=/usr/bin/fuse-overlayfs \
			--events-backend none \
			--log-driver none \
			-- \
			localhost/rust-cross:latest \
	\
		env "${_environment[@]}" \
	"${_executable}" \
			"+${_toolchain}" \
			"${_tool}" \
			"${@}" \
	#
!!

