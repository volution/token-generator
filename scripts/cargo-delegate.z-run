#!/dev/null




--<< cargo / exec
	
	_switch="${__CARGO__SWITCH}"
	
	if test -z "${__SOURCES__PREPARED:-}" ; then
		"${ZRUN}" ':: sources / embedded / prepare'
	fi
	
	export -- __META__BUILD_SOURCES_HASH="$( < ./embedded/build/sources.hash )"
	export -- __META__BUILD_GIT_HASH="$( < "${__OUTPUTS}/markers/build-git-hash.txt" )"
	
	case "${_switch}" in
		( local )
			case "${__CARGO__SWITCH_0:-local}" in
				( local ) ;;
				( local-remote ) ;;
				( remote ) false -- a6339595 ;;
				( * ) false -- 347ba846 ;;
			esac
			exec -- "${ZRUN}" ':: cargo / exec / local' "${@}"
		;;
		( remote )
			case "${__CARGO__SWITCH_0:-remote}" in
				( remote ) ;;
				( local-remote )
					exec -- "${ZRUN}" ':: cargo / exec / local-remote' "${@}"
				;;
				( local ) false -- fbb55b95 ;;
				( * ) false -- 3e4e954f ;;
			esac
			exec -- "${ZRUN}" ':: cargo / exec / remote' "${@}"
		;;
		( * )
			false -- '[1a224da4]'
		;;
	esac
!!




--<< cargo / exec / local
	
	_scratch="$( exec -- "${ZRUN}" ':: workbench / scratch' )"
	_executable="${__CARGO_LOCAL__EXECUTABLE}"
	
	if test ! -e "${_scratch}/target" ; then
		mkdir -m 00700 -- "${_scratch}/target"
	fi
	if test ! -e "${_scratch}/sources" ; then
		ln -s -T -- "$( exec -- readlink -e -- ./sources )" "${_scratch}/sources"
	fi
	
	test "${_scratch}/sources" -ef ./sources
	
	exec -- "${ZRUN}" ':: cargo / exec / any / delegate' \
			"${_scratch}" "${_executable}" \
			"${@}" \
	#
!!




--<< cargo / exec / remote / delegate
	
	test -d "${__CARGO_REMOTE__SCRATCH}"
	_scratch="${__CARGO_REMOTE__SCRATCH}/${__CARGO_REMOTE__IDENTIFIER}"
	_executable="${__CARGO_REMOTE__EXECUTABLE}"
	
	exec -- "${ZRUN}" ':: cargo / exec / any / delegate' \
			"${_scratch}" "${_executable}" \
			"${@}" \
	#
!!




--<< cargo / exec / local-remote
	exec -- "${ZRUN}" ':: cargo / exec / remote / delegate' "${@}"
!!




--<< cargo / exec / any / delegate
	
	test "${#}" -ge 3
	_scratch="${1}"
	_executable="${2}"
	_tool="${3}"
	shift -- 3
	
	test -d "${_scratch}"
	
	test -f "${_executable}"
	test -x "${_executable}"
	
	export -- __META__BUILD_SOURCES_HASH="${__META__BUILD_SOURCES_HASH:-[unknown-bsh]}"
	export -- __META__BUILD_GIT_HASH="${__META__BUILD_GIT_HASH:-[unknown-bgh]}"
	export -- __META__BUILD_TARGET_TYPE="${__META__BUILD_TARGET_TYPE:-[unknown-btt]}"
	
	_toolchain=stable
	
	_cross=false
	if test "${__CARGO__CROSS:-false}" == true ; then
		_cross=true
	fi
	if test "${_tool}" == cross ; then
		_cross=true
		test "${#}" -ge 1
		_tool="${1}"
		shift -- 1
	fi
	
	if test -n "${__CARGO__TARGET:-}" ; then
		_target="${__CARGO__TARGET}"
	else
		_target=native
	fi
	
	_cargo_flags=()
	_rust_flags=()
	
	case "${_tool}" in
		
		( check | build | run )
			if test "${_target}" != native ; then
				_cargo_flags+=(
						--target "${_target}"
					)
			fi
		;;&
		
		( check )
			_cargo_flags+=(
					--frozen
					--offline
				)
		;;
		
		( build | run )
			_cargo_flags+=(
					--frozen
					--offline
				)
			if test "${_cross}" == false ; then
				_rust_flags+=(
						
						-C target-feature=-crt-static
						-C relocation-model=pic
						-C rpath=no
						
					#~	-C target-feature=+crt-static
					#~	-C relocation-model=static
						
						-C linker=clang
						-C link-arg=-fuse-ld=lld
					#~	-C link-arg=-fuse-ld=mold
					#~	-C link-arg=-Wl,--compress-debug-sections=none
					#~	-C link-arg=-Wl,--compress-debug-sections=zstd
					#~	-C link-arg=-Wl,--compress-debug-sections=zlib
						
					#?	-C link-self-contained=no
						
						-C link-dead-code=no
						-C prefer-dynamic=no
						-C force-frame-pointers=no
						
					)
			else
				_rust_flags+=(
						
						-C link-dead-code=no
						-C prefer-dynamic=no
						-C force-frame-pointers=no
						
					)
			fi
			case "${__CARGO__TARGET:-native}" in
				( native )
					_rust_flags+=(
							
						#~	-C target-cpu=native
						#~	-C target-cpu=core2
						#~	-C target-cpu=nocona
							-C target-cpu=x86-64-v2
							
						)
				;;&
				( x86_64-* )
					_rust_flags+=(
							
							-C target-cpu=x86-64-v2
							
						)
				;;&
				( native | *-linux-* | *-android )
					_rust_flags+=(
							
							-C link-arg=-Wl,--compress-debug-sections=zlib
							
						)
				;;&
			esac
			case "${__META__BUILD_TARGET_TYPE}" in
				( release )
					_rust_flags+=(
							
							-C opt-level=2
							
						#?	-C lto=fat
						#?	-C codegen-units=1
							
							-C debuginfo=1
							-C split-debuginfo=off
							-C strip=none
							
							-C panic=abort
							-C debug-assertions=no
							-C overflow-checks=yes
							
						)
				;;&
			esac
		;;
		
		( doc )
			_cargo_flags+=(
					--frozen
					--offline
				)
			_rust_flags+=(
					-A warnings
				)
		;;
		
		( metadata )
			_cargo_flags+=(
					--frozen
					--offline
				)
		;;
		
		( update )
		;;
		( fetch | vendor )
			_cargo_flags+=(
					--locked
				)
		;;
		
		( tree | outdated | license | cyclonedx )
		;;
		
		( collect )
		;;
		
		( version )
		;;
		
		( * )
			printf -- '[ee]  invalid tool `%s`;  aborting!\n' "${_tool}" >&2
			exit -- 1
		;;
	esac
	
	case "${_tool}" in
		
		( collect )
			exec -- "${ZRUN}" ':: cargo / tool / collect' \
					--scratch "${_scratch}" \
					--cross "${_cross}" \
					--target "${_target}" \
					"${@}" \
			#
		;;
	esac
	
	_rust_flags+=(
			-C metadata="${__META__BUILD_GIT_HASH}--${__META__BUILD_TARGET_TYPE}"
		)
	
	export -- __CARGO__RUST_FLAGS="${_rust_flags[*]}"
	export -- __CARGO__TARGET="${_target}"
	
	_tool_arguments=(
			"${_cargo_flags[@]}"
			"${@}"
		)
	
	if test "${_cross}" == false ; then
		exec -- "${ZRUN}" ':: cargo / exec / any / native' "${_scratch}" "${_executable}" "${_toolchain}" "${_tool}" "${_tool_arguments[@]}"
	else
		exec -- "${ZRUN}" ':: cargo / exec / any / podman' "${_scratch}" "${_toolchain}" "${_tool}" "${_tool_arguments[@]}"
	fi
!!




--<< cargo / exec / any / native
	
	test "${#}" -ge 4
	_scratch="${1}"
	_executable="${2}"
	_toolchain="${3}"
	_tool="${4}"
	shift -- 4
	
	if test -n "${__CARGO__HOME:-}" ; then
		_cargo_home="${__CARGO__HOME}"
	else
		_cargo_home="${HOME}/.cargo"
	fi
	_cargo_home="$( exec -- readlink -e -- "${_cargo_home}" )"
	
	if test "${__META__BUILD_TARGET_TYPE}" != '[unknown-btt]' ; then
		_cargo_target_subdir="${__META__BUILD_TARGET_TYPE}"
	else
		_cargo_target_subdir='unknown'
	fi
	
	_environment=(
			
			CARGO_HOME="${_cargo_home}"
			CARGO_TARGET_DIR="${_scratch}/target/${_cargo_target_subdir}/${__CARGO__TARGET}"
			CARGO_BUILD_RUSTFLAGS="${__CARGO__RUST_FLAGS}"
			
			RUST_BACKTRACE=full
			
			__META__BUILD_SOURCES_HASH="${__META__BUILD_SOURCES_HASH}"
			__META__BUILD_GIT_HASH="${__META__BUILD_GIT_HASH}"
			__META__BUILD_TARGET_TYPE="${__META__BUILD_TARGET_TYPE}"
			
			PATH="${PATH}"
			USER="${USER}"
			HOME="${HOME}"
			TMPDIR="${TMPDIR}"
			TERM="${TERM}"
			
			LANG=C.UTF-8
			LC_ALL=C.UTF-8
			
		)
	
	cd -- "${_scratch}/sources"
	
	exec -- \
	\
		nodaemon \
		nice -n 19 -- \
	\
		env -i "${_environment[@]}" \
	"${_executable}" \
			"+${_toolchain}" \
			"${_tool}" \
			"${@}" \
	#
!!




--<< cargo / exec / any / podman
	
	test "${#}" -ge 3
	_scratch="${1}"
	_toolchain="${2}"
	_tool="${3}"
	shift -- 3
	
	_executable=/opt/cargo/bin/cargo
	
	if test "${__META__BUILD_TARGET_TYPE}" != '[unknown-btt]' ; then
		_cargo_target_subdir="${__META__BUILD_TARGET_TYPE}"
	else
		_cargo_target_subdir='unknown'
	fi
	
	_path='/usr/local/bin:/usr/bin:/bin'
	_environment=(
			
			USER=rust
			HOME=/rust/home
			PATH="${_path}"
			TMPDIR=/tmp
			TERM="${TERM}"
			LC_ALL=C.UTF-8
			LANG=C.UTF-8
			
			RUSTUP_HOME=/opt/rustup
			CARGO_HOME=/opt/cargo
			CARGO_TARGET_DIR="/rust/target/${_cargo_target_subdir}/${__CARGO__TARGET}"
			CARGO_BUILD_RUSTFLAGS="${__CARGO__RUST_FLAGS}"
			
			RUST_BACKTRACE=full
			
			__META__BUILD_SOURCES_HASH="${__META__BUILD_SOURCES_HASH}"
			__META__BUILD_GIT_HASH="${__META__BUILD_GIT_HASH}"
			__META__BUILD_TARGET_TYPE="${__META__BUILD_TARGET_TYPE}"
			
		)
	
	case "${__CARGO__TARGET}" in
		( native )
		;;
		( x86_64-unknown-linux-gnu )
			_environment+=(
					CC=x86_64-linux-gnu-gcc
					CXX=x86_64-linux-gnu-g++
					AR=x86_64-linux-gnu-ar
					CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc
				)
		;;
		( aarch64-unknown-linux-gnu )
			_environment+=(
					CC=aarch64-linux-gnu-gcc
					CXX=aarch64-linux-gnu-g++
					AR=aarch64-linux-gnu-ar
					CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
				)
		;;
		( arm-unknown-linux-gnueabihf )
			_environment+=(
					CC=arm-linux-gnueabihf-gcc
					CXX=arm-linux-gnueabihf-g++
					AR=arm-linux-gnueabihf-ar
					CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
				)
		;;
		( x86_64-unknown-linux-musl )
			_environment+=(
					PATH="/opt/x86_64-linux-musl/bin:${_path}"
					CC=x86_64-linux-musl-gcc
					CXX=x86_64-linux-musl-g++
					AR=x86_64-linux-musl-ar
					CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-musl-gcc
				)
		;;
		( aarch64-unknown-linux-musl )
			_environment+=(
					PATH="/opt/aarch64-linux-musl/bin:${_path}"
					CC=aarch64-linux-musl-gcc
					CXX=aarch64-linux-musl-g++
					AR=aarch64-linux-musl-ar
					CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc
				)
		;;
		( arm-unknown-linux-musleabihf )
			_environment+=(
					PATH="/opt/armv6-linux-musl/bin:${_path}"
					CC=armv6-linux-musleabihf-gcc
					CXX=armv6-linux-musleabihf-g++
					AR=armv6-linux-musleabihf-ar
					CARGO_TARGET_ARM_UNKNOWN_LINUX_MUSLEABIHF_LINKER=armv6-linux-musleabihf-gcc
				)
		;;
		( x86_64-linux-android )
			_environment+=(
					PATH="/opt/android-ndk/bin:${_path}"
					CC=x86_64-linux-android-clang
					CXX=x86_64-linux-android-clang++
					AR=x86_64-linux-gnu-ar
					CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER=x86_64-linux-android-clang
				)
		;;
		( aarch64-linux-android )
			_environment+=(
					PATH="/opt/android-ndk/bin:${_path}"
					CC=aarch64-linux-android-clang
					CXX=aarch64-linux-android-clang++
					AR=aarch64-linux-gnu-ar
					CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=aarch64-linux-android-clang
				)
		;;
		( x86_64-apple-darwin )
			_environment+=(
					PATH="/opt/osxcross/bin:${_path}"
					CC=x86_64-apple-darwin-clang
					CXX=x86_64-apple-darwin-clang++
					AR=x86_64-apple-darwin-ar
					CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER=x86_64-apple-darwin-clang
				)
		;;
		( aarch64-apple-darwin )
			_environment+=(
					PATH="/opt/osxcross/bin:${_path}"
					CC=arm64-apple-darwin-clang
					CXX=arm64-apple-darwin-clang++
					AR=arm64-apple-darwin-ar
					CARGO_TARGET_AARCH64_APPLE_DARWIN_LINKER=arm64-apple-darwin-clang
				)
		;;
		( x86_64-pc-windows-gnu )
			_environment+=(
					CC=x86_64-w64-mingw32-gcc
					CXX=x86_64-w64-mingw32-g++
					AR=x86_64-w64-mingw32-ar
					CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc
				)
		;;
		( * )
			printf -- '[ee]  invalid target `%s`;  aborting!\n' "${__CARGO__TARGET}" >&2
			exit -- 1
		;;
	esac
	
	test -d "${_scratch}"
	test -d "${_scratch}/sources"
	
	if test ! -e "${_scratch}/cross" ; then
		mkdir -- "${_scratch}/cross"
		mkdir -- "${_scratch}/cross/target"
		mkdir -- "${_scratch}/cross/registry"
		mkdir -- "${_scratch}/cross/registry/git"
		mkdir -- "${_scratch}/cross/tmp"
	fi
	
	test -d "${_scratch}/cross/target"
	test -d "${_scratch}/cross/registry"
	test -d "${_scratch}/cross/registry/git"
	
	exec -- \
	\
		systemd-run --user --pty --wait --collect --quiet -- \
	\
		nodaemon \
		nice -n 19 -- \
	\
		podman container run \
			--rm \
			--interactive \
			--tty \
			--init \
			--workdir /rust/sources \
			--volume "${_scratch}/sources":/rust/sources:ro \
			--volume "${_scratch}/cross/target":/rust/target:rw \
			--volume "${_scratch}/cross/registry":/rust/registry:rw \
			--env TERM \
			--network host \
			--storage-opt overlay.mount_program=/usr/bin/fuse-overlayfs \
			--events-backend none \
			--log-driver none \
			-- \
			localhost/rust-cross:latest \
	\
		env -i "${_environment[@]}" \
	"${_executable}" \
			"+${_toolchain}" \
			"${_tool}" \
			"${@}" \
	#
!!

