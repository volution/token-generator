#!/dev/null




--<< cargo / exec
	
	_switch="${__CARGO__SWITCH}"
	
	if test -z "${__SOURCES__PREPARED:-}" ; then
		"${ZRUN}" ':: sources / embedded / prepare'
	fi
	
	export -- __META__BUILD_SOURCES_HASH="$( < ./embedded/build/sources.hash )"
	export -- __META__BUILD_GIT_HASH="$( < "${__OUTPUTS}/markers/build-git-hash.txt" )"
	
	case "${_switch}" in
		( local )
			case "${__CARGO__SWITCH_0:-local}" in
				( local ) ;;
				( local-remote ) ;;
				( remote ) false -- a6339595 ;;
				( * ) false -- 347ba846 ;;
			esac
			exec -- "${ZRUN}" ':: cargo / exec / local' "${@}"
		;;
		( remote )
			case "${__CARGO__SWITCH_0:-remote}" in
				( remote ) ;;
				( local-remote )
					exec -- "${ZRUN}" ':: cargo / exec / local-remote' "${@}"
				;;
				( local ) false -- fbb55b95 ;;
				( * ) false -- 3e4e954f ;;
			esac
			exec -- "${ZRUN}" ':: cargo / exec / remote' "${@}"
		;;
		( * )
			false -- '[1a224da4]'
		;;
	esac
!!




--<< cargo / exec / local
	
	_scratch="$( exec -- "${ZRUN}" ':: workbench / scratch' )"
	_executable="${__CARGO_LOCAL__EXECUTABLE}"
	
	if test ! -e "${_scratch}/sources" ; then
		ln -s -T -- "$( exec -- readlink -e -- ./sources )" "${_scratch}/sources"
	fi
	if test ! -e "${_scratch}/target" ; then
		mkdir -m 00700 -- "${_scratch}/target"
	fi
	
	test "${_scratch}/sources" -ef ./sources
	
	exec -- "${ZRUN}" ':: cargo / exec / any / delegate' \
			"${_scratch}" "${_executable}" \
			"${@}" \
	#
!!




--<< cargo / exec / remote / delegate
	
	test -d "${__CARGO_REMOTE__SCRATCH}"
	_scratch="${__CARGO_REMOTE__SCRATCH}/${__CARGO_REMOTE__IDENTIFIER}"
	_executable="${__CARGO_REMOTE__EXECUTABLE}"
	
	exec -- "${ZRUN}" ':: cargo / exec / any / delegate' \
			"${_scratch}" "${_executable}" \
			"${@}" \
	#
!!




--<< cargo / exec / local-remote
	exec -- "${ZRUN}" ':: cargo / exec / remote / delegate' "${@}"
!!




--<< cargo / exec / any / delegate
	
	test "${#}" -ge 3
	_scratch="${1}"
	_executable="${2}"
	_tool="${3}"
	shift -- 3
	
	test -d "${_scratch}"
	
	export -- __META__BUILD_SOURCES_HASH="${__META__BUILD_SOURCES_HASH:-[unknown-bsh]}"
	export -- __META__BUILD_GIT_HASH="${__META__BUILD_GIT_HASH:-[unknown-bgh]}"
	export -- __META__BUILD_TARGET_TYPE="${__META__BUILD_TARGET_TYPE:-[unknown-btt]}"
	
	_toolchain=stable
	
	_release=false
	case "${__META__BUILD_TARGET_TYPE}" in
		( release )
			_release=true
		;;
	esac
	
	_cross=false
	if test "${__CARGO__CROSS:-false}" == true ; then
		_cross=true
	fi
	if test "${_tool}" == cross ; then
		_cross=true
		test "${#}" -ge 1
		_tool="${1}"
		shift -- 1
	fi
	
	if test -n "${__CARGO__TARGET:-}" ; then
		_target="${__CARGO__TARGET}"
	else
		_target=native
	fi
	
	_cargo_flags=()
	_rust_flags=()
	
	case "${_tool}" in
		
		( check | build | run )
			
			if test "${_target}" != native ; then
				_cargo_flags+=(
						--target "${_target%-static}"
					)
			fi
			
			if test "${_target}" == "${_target%-static}" ; then
				_rust_flags+=(
						-C target-feature=-crt-static
						-C relocation-model=pic
					)
			else
				_rust_flags+=(
						-C target-feature=+crt-static
						-C relocation-model=static
					)
			fi
			
		;;&
		
		( check )
			_cargo_flags+=(
					--frozen
					--offline
				)
		;;
		
		( build | run )
			_cargo_flags+=(
					--frozen
					--offline
				)
			
			if test "${_release}" == true ; then
				
				if test "${_cross}" == false ; then
					_rust_flags+=(
							-C linker=clang
							-C link-arg=-fuse-ld=lld
						)
				fi
				_rust_flags+=(
						-C link-dead-code=no
						-C prefer-dynamic=no
						-C force-frame-pointers=no
					)
				
				case "${__CARGO__TARGET:-native}" in
					( native )
						_rust_flags+=(
								-C target-cpu=x86-64-v2
							)
					;;&
					( x86_64-* )
						_rust_flags+=(
								-C target-cpu=x86-64-v2
							)
					;;&
					( i686-* )
						_rust_flags+=(
								-C target-cpu=i586
							)
					;;&
					( aarch64-* | armv7-* | arm-* )
						_rust_flags+=(
								-C target-cpu=generic
							)
					;;&
				esac
				
				case "${__CARGO__TARGET:-native}" in
					( native | *-linux-* )
						_rust_flags+=(
								-C debuginfo=0
								-C split-debuginfo=off
								-C strip=symbols
							##	-C link-arg=-Wl,--compress-debug-sections=zlib
							)
					;;
					( *-apple-* )
						_rust_flags+=(
								-C debuginfo=0
								-C split-debuginfo=off
							)
					;;
					( *-windows-* )
						_rust_flags+=(
								-C debuginfo=0
								-C split-debuginfo=off
								-C strip=symbols
							)
					;;
					( *-wasip1 )
					;;
					( * )
						false -- 5cc039a0
					;;
				esac
				
				case "${__CARGO__TARGET:-native}" in
					( native )
						_rust_flags+=(
								-C opt-level=3
							#!	-C lto=fat
								-C codegen-units=1
							#!	-C linker-plugin-lto=yes
							)
					;;
					( * )
						_rust_flags+=(
								-C opt-level=3
								-C lto=fat
								-C codegen-units=1
							#!	-C linker-plugin-lto=yes
							)
					;;
				esac
				_rust_flags+=(
						-C panic=abort
						-C debug-assertions=no
						-C overflow-checks=yes
					)
			fi
		;;
		
		( doc )
			_cargo_flags+=(
					--frozen
					--offline
				)
			_rust_flags+=(
					-A warnings
				)
		;;
		
		( metadata )
			_cargo_flags+=(
					--frozen
					--offline
				)
		;;
		
		( update | generate-lockfile | upgrade )
		;;
		( fetch | vendor )
			_cargo_flags+=(
					--locked
				)
		;;
		
		( tree | outdated | license | duplicates | audit | geiger | cyclonedx )
		;;
		
		( collect )
		;;
		
		( version )
		;;
		
		( * )
			printf -- '[ee]  invalid tool `%s`;  aborting!\n' "${_tool}" >&2
			exit -- 1
		;;
	esac
	
	case "${_tool}" in
		
		( collect )
			exec -- "${ZRUN}" ':: cargo / tool / collect' \
					--scratch "${_scratch}" \
					--cross "${_cross}" \
					--target "${_target}" \
					"${@}" \
			#
		;;
	esac
	
	_rust_flags+=(
		#!	-C metadata="${__META__BUILD_TARGET_TYPE}--${__META__BUILD_GIT_HASH}"
			-C metadata="${__META__BUILD_TARGET_TYPE}"
		)
	
	export -- __CARGO__RUST_FLAGS="${_rust_flags[*]}"
	export -- __CARGO__TARGET="${_target}"
	
	_tool_arguments=(
			"${_cargo_flags[@]}"
			"${@}"
		)
	
	_environment_0=(
			DBUS_SESSION_BUS_ADDRESS="${DBUS_SESSION_BUS_ADDRESS:-unix:path=/run/user/$UID/bus}"
			XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$UID}"
			USER="${USER}"
			HOME="${HOME}"
			PATH="${PATH}"
			TMPDIR="${TMPDIR}"
			LANG=C.UTF-8
			LC_ALL=C.UTF-8
			TERM=dumb
		)
	
	_environment_1=(
			__CARGO__TARGET="${__CARGO__TARGET}"
			__CARGO__RUST_FLAGS="${__CARGO__RUST_FLAGS}"
			__META__BUILD_SOURCES_HASH="${__META__BUILD_SOURCES_HASH}"
			__META__BUILD_GIT_HASH="${__META__BUILD_GIT_HASH}"
			__META__BUILD_TARGET_TYPE="${__META__BUILD_TARGET_TYPE}"
			ZRUN_LIBRARY_URL="${ZRUN_LIBRARY_URL}"
		)
	
	_wrapper=(
			env -i "${_environment_0[@]}"
			systemd-run
				--user --wait --pipe
				--nice 19
				--collect --quiet
				--
			env -i "${_environment_0[@]}" "${_environment_1[@]}"
			nodaemon
		)
	
	if test "${_cross}" == false ; then
		exec -- "${_wrapper[@]}" \
		"${ZRUN}" ':: cargo / exec / any / native' "${_scratch}" "${_executable}" "${_toolchain}" "${_tool}" "${_tool_arguments[@]}"
	else
		exec -- "${_wrapper[@]}" \
		"${ZRUN}" ':: cargo / exec / any / podman' "${_scratch}" "${_toolchain}" "${_tool}" "${_tool_arguments[@]}"
	fi
!!




--<< cargo / exec / any / native
	
	test "${#}" -ge 4
	_scratch="${1}"
	_executable="${2}"
	_toolchain="${3}"
	_tool="${4}"
	shift -- 4
	
	test -f "${_executable}"
	test -x "${_executable}"
	
	if test -n "${__CARGO__HOME:-}" ; then
		_cargo_home="${__CARGO__HOME}"
	else
		_cargo_home="${HOME}/.cargo"
	fi
	_cargo_home="$( exec -- readlink -e -- "${_cargo_home}" )"
	
	if test "${__META__BUILD_TARGET_TYPE}" != '[unknown-btt]' ; then
		_cargo_target_subdir="${__META__BUILD_TARGET_TYPE}"
	else
		_cargo_target_subdir='unknown'
	fi
	
	_environment=(
			
			CARGO_HOME="${_cargo_home}"
			CARGO_TARGET_DIR="${_scratch}/target/${_cargo_target_subdir}/${__CARGO__TARGET}"
			CARGO_BUILD_RUSTFLAGS="${__CARGO__RUST_FLAGS}"
			
			RUST_BACKTRACE=full
			
			__META__BUILD_SOURCES_HASH="${__META__BUILD_SOURCES_HASH}"
			__META__BUILD_GIT_HASH="${__META__BUILD_GIT_HASH}"
			__META__BUILD_TARGET_TYPE="${__META__BUILD_TARGET_TYPE}"
			
			PATH="${PATH}"
			USER="${USER}"
			HOME="${HOME}"
			TMPDIR="${TMPDIR}"
			TERM="${TERM}"
			
			LANG=C.UTF-8
			LC_ALL=C.UTF-8
			
		)
	
	cd -- "${_scratch}/sources"
	
	exec -- \
		env -i "${_environment[@]}" \
	"${_executable}" \
			"+${_toolchain}" \
			"${_tool}" \
			"${@}" \
	#
!!




--<< cargo / exec / any / podman
	
	test "${#}" -ge 3
	_scratch="${1}"
	_toolchain="${2}"
	_tool="${3}"
	shift -- 3
	
	_executable=/opt/cargo/bin/cargo
	
	if test "${__META__BUILD_TARGET_TYPE}" != '[unknown-btt]' ; then
		_cargo_target_subdir="${__META__BUILD_TARGET_TYPE}"
	else
		_cargo_target_subdir='unknown'
	fi
	
	_path='/usr/local/bin:/usr/bin:/bin'
	_environment=(
			
			USER=rust
			HOME=/rust/home
			PATH="${_path}"
			TMPDIR=/tmp
			TERM="${TERM}"
			LC_ALL=C.UTF-8
			LANG=C.UTF-8
			
			RUSTUP_HOME=/opt/rustup
			CARGO_HOME=/opt/cargo
			CARGO_TARGET_DIR="/rust/target/${_cargo_target_subdir}/${__CARGO__TARGET}"
			CARGO_BUILD_RUSTFLAGS="${__CARGO__RUST_FLAGS}"
			
			RUST_BACKTRACE=full
			
			__META__BUILD_SOURCES_HASH="${__META__BUILD_SOURCES_HASH}"
			__META__BUILD_GIT_HASH="${__META__BUILD_GIT_HASH}"
			__META__BUILD_TARGET_TYPE="${__META__BUILD_TARGET_TYPE}"
			
		)
	
	case "${__CARGO__TARGET}" in
		( native )
		;;
		( x86_64-unknown-linux-gnu | x86_64-unknown-linux-gnu-static )
			_environment+=(
					CC=x86_64-linux-gnu-gcc
					CXX=x86_64-linux-gnu-g++
					AR=x86_64-linux-gnu-ar
					RANLIB=x86_64-linux-gnu-ranlib
					CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc
				)
		;;
		( i686-unknown-linux-gnu | i686-unknown-linux-gnu-static )
			_environment+=(
					CC=i686-linux-gnu-gcc
					CXX=i686-linux-gnu-g++
					AR=i686-linux-gnu-ar
					RANLIB=i686-linux-gnu-ranlib
					CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=i686-linux-gnu-gcc
				)
		;;
		( aarch64-unknown-linux-gnu | aarch64-unknown-linux-gnu-static )
			_environment+=(
					CC=aarch64-linux-gnu-gcc
					CXX=aarch64-linux-gnu-g++
					AR=aarch64-linux-gnu-ar
					RANLIB=aarch64-linux-gnu-ranlib
					CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
				)
		;;
		( armv7-unknown-linux-gnueabihf | armv7-unknown-linux-gnueabihf-static )
			_environment+=(
					CC=arm-linux-gnueabihf-gcc
					CXX=arm-linux-gnueabihf-g++
					AR=arm-linux-gnueabihf-ar
					RANLIB=arm-linux-gnueabihf-ranlib
					CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
				)
		;;
		( arm-unknown-linux-gnueabihf | arm-unknown-linux-gnueabihf-static )
			_environment+=(
					CC=arm-linux-gnueabihf-gcc
					CXX=arm-linux-gnueabihf-g++
					AR=arm-linux-gnueabihf-ar
					RANLIB=arm-linux-gnueabihf-ranlib
					CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
				)
		;;
		( x86_64-unknown-linux-musl | x86_64-unknown-linux-musl-static )
			_environment+=(
					PATH="/opt/x86_64-linux-musl/bin:${_path}"
					CC=x86_64-linux-musl-gcc
					CXX=x86_64-linux-musl-g++
					AR=x86_64-linux-musl-ar
					RANLIB=x86_64-linux-musl-ranlib
					CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-musl-gcc
				)
		;;
		( i686-unknown-linux-musl | i686-unknown-linux-musl-static )
			_environment+=(
					PATH="/opt/i686-linux-musl/bin:${_path}"
					CC=i686-linux-musl-gcc
					CXX=i686-linux-musl-g++
					AR=i686-linux-musl-ar
					RANLIB=i686-linux-musl-ranlib
					CARGO_TARGET_I686_UNKNOWN_LINUX_MUSL_LINKER=i686-linux-musl-gcc
				)
		;;
		( aarch64-unknown-linux-musl | aarch64-unknown-linux-musl-static )
			_environment+=(
					PATH="/opt/aarch64-linux-musl/bin:${_path}"
					CC=aarch64-linux-musl-gcc
					CXX=aarch64-linux-musl-g++
					AR=aarch64-linux-musl-ar
					RANLIB=aarch64-linux-musl-ranlib
					CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc
				)
		;;
		( armv7-unknown-linux-musleabihf | armv7-unknown-linux-musleabihf-static )
			_environment+=(
					PATH="/opt/armv7-linux-musl/bin:${_path}"
					CC=armv7l-linux-musleabihf-gcc
					CXX=armv7l-linux-musleabihf-g++
					AR=armv7l-linux-musleabihf-ar
					RANLIB=armv7l-linux-musleabihf-ranlib
					CARGO_TARGET_ARMV7_UNKNOWN_LINUX_MUSLEABIHF_LINKER=armv7l-linux-musleabihf-gcc
				)
		;;
		( arm-unknown-linux-musleabihf | arm-unknown-linux-musleabihf-static )
			_environment+=(
					PATH="/opt/armv6-linux-musl/bin:${_path}"
					CC=armv6-linux-musleabihf-gcc
					CXX=armv6-linux-musleabihf-g++
					AR=armv6-linux-musleabihf-ar
					RANLIB=armv6-linux-musleabihf-ranlib
					CARGO_TARGET_ARM_UNKNOWN_LINUX_MUSLEABIHF_LINKER=armv6-linux-musleabihf-gcc
				)
		;;
		( x86_64-linux-android )
			_environment+=(
					PATH="/opt/android-ndk/bin:${_path}"
					CC=x86_64-linux-android-clang
					CXX=x86_64-linux-android-clang++
					AR=x86_64-linux-android-ar
					RANLIB=x86_64-linux-android-ranlib
					CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER=x86_64-linux-android-clang
				)
		;;
		( i686-linux-android )
			_environment+=(
					PATH="/opt/android-ndk/bin:${_path}"
					CC=i686-linux-android-clang
					CXX=i686-linux-android-clang++
					AR=i686-linux-android-ar
					RANLIB=i686-linux-android-ranlib
					CARGO_TARGET_I686_LINUX_ANDROID_LINKER=i686-linux-android-clang
				)
		;;
		( aarch64-linux-android )
			_environment+=(
					PATH="/opt/android-ndk/bin:${_path}"
					CC=aarch64-linux-android-clang
					CXX=aarch64-linux-android-clang++
					AR=aarch64-linux-android-ar
					RANLIB=aarch64-linux-android-ranlib
					CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=aarch64-linux-android-clang
				)
		;;
		( armv7-linux-androideabi )
			_environment+=(
					PATH="/opt/android-ndk/bin:${_path}"
					CC=armv7a-linux-androideabi-clang
					CXX=armv7a-linux-androideabi-clang++
					AR=armv7a-linux-androideabi-ar
					RANLIB=armv7a-linux-androideabi-ranlib
					CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=armv7a-linux-androideabi-clang
				)
		;;
		( x86_64-apple-darwin )
			_environment+=(
					PATH="/opt/osxcross/bin:${_path}"
					CC=x86_64-apple-darwin-clang
					CXX=x86_64-apple-darwin-clang++
					AR=x86_64-apple-darwin-ar
					RANLIB=x86_64-apple-darwin-ranlib
					CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER=x86_64-apple-darwin-clang
				)
		;;
		( aarch64-apple-darwin )
			_environment+=(
					PATH="/opt/osxcross/bin:${_path}"
					CC=arm64-apple-darwin-clang
					CXX=arm64-apple-darwin-clang++
					AR=arm64-apple-darwin-ar
					RANLIB=arm64-apple-darwin-ranlib
					CARGO_TARGET_AARCH64_APPLE_DARWIN_LINKER=arm64-apple-darwin-clang
				)
		;;
		( x86_64-pc-windows-gnu )
			_environment+=(
					CC=x86_64-w64-mingw32-gcc
					CXX=x86_64-w64-mingw32-g++
					AR=x86_64-w64-mingw32-ar
					RANLIB=x86_64-w64-mingw32-ranlib
					CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc
				)
		;;
		( wasm32-wasip1 )
		;;
		( *-freebsd | *-openbsd | *-darwin | *-windows-msvc | *-windows-gnu | *-windows-gnullvm )
			printf -- '[ww]  unsupported target `%s`;  continuing!\n' "${__CARGO__TARGET}" >&2
		;;
		( * )
			printf -- '[ee]  invalid target `%s`;  aborting!\n' "${__CARGO__TARGET}" >&2
			exit -- 1
		;;
	esac
	
	_identifier="$( exec -- md5sum -b <<< "${__META__BUILD_TARGET_TYPE} -- ${__CARGO__TARGET} -- ${_scratch}" )"
	_identifier="${_identifier%% *}"
	
	test -d "${_scratch}"
	test -d "${_scratch}/sources"
	
	_cross_folders=(
			"${_scratch}/cross"
			"${_scratch}/cross/sources--${_identifier}"
			"${_scratch}/cross/target--${_identifier}"
			"${_scratch}/cross/registry"
			"${_scratch}/cross/registry/git"
		)
	for _cross_folder in "${_cross_folders[@]}" ; do
		if test ! -e "${_cross_folder}" ; then
			mkdir -- "${_cross_folder}"
		else
			test -d "${_cross_folder}"
		fi
	done
	
	rsync \
			--delete \
			--recursive \
			--copy-links \
			--checksum --checksum-choice md5 \
			--times --perms \
			--chmod D00555,F00444 \
			--exclude '.git' \
			--exclude 'target' \
			-- \
			"${_scratch}/sources/" \
			"${_scratch}/cross/sources--${_identifier}/" \
	#
	
	exec -- \
	\
		podman container run \
			--name "rust-cross--${_identifier}" \
			--rm \
			--interactive \
			--tty \
			--init \
			--workdir /rust/sources \
			--volume "${_scratch}/cross/sources--${_identifier}":/rust/sources:ro \
			--volume "${_scratch}/cross/target--${_identifier}":/rust/target:rw \
			--volume "${_scratch}/cross/registry":/rust/registry:rw \
			--env TERM \
			--runtime runc \
			--network host \
			--storage-opt overlay.mount_program=/usr/bin/fuse-overlayfs \
			--events-backend none \
			--log-driver none \
			-- \
			localhost/rust-cross:latest \
	\
		env -i "${_environment[@]}" \
	"${_executable}" \
			"+${_toolchain}" \
			"${_tool}" \
			"${@}" \
	#
!!

