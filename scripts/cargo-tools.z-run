#!/dev/null




--<< cargo / tool / collect
	
	_type=debug
	_scratch=''
	_outputs=''
	_cross=false
	_bins=all
	
	if test -n "${__CARGO__TARGET:-}" ; then
		_target="${__CARGO__TARGET}"
	else
		_target=native
	fi
	
	while test "${#}" -ge 1 ; do
		case "${1}" in
			( --target )
				test "${#}" -ge 2
				if test "${_target}" != "${2}" ; then
					printf -- '[ee]  mismatched target directives;  aborting!\n' >&2
					exit -- 1
				fi
				shift -- 2
			;;
			( --release )
				_type=release
				shift -- 1
			;;
			( --cross )
				test "${#}" -ge 2
				_cross="${2}"
				shift -- 2
			;;
			( --scratch )
				test "${#}" -ge 2
				_scratch="${2}"
				shift -- 2
			;;
			( --bins )
				_bins=all
				shift -- 1
			;;
			( --bin )
				test "${#}" -ge 2
				_bins="${2}"
				shift -- 2
			;;
			( --features )
				test "${#}" -ge 2
				shift -- 2
			;;
			( --no-default-features )
				shift -- 1
			;;
			( * )
				false
			;;
		esac
	done
	test "${#}" -eq 0
	
	_variant='default'
	_bin_suffix=''
	_bin_executable=true
	_target_0="${_target}"
	
	case "${_target}" in
		( native ) _arch='native' ;;
		( x86_64-* ) _arch='x86_64' ;;
		( i686-* ) _arch='i686' ;;
		( aarch64-* ) _arch='aarch64' ;;
		( armv7-* ) _arch='armv7' ;;
		( arm-* ) _arch='armv6' ;;
		( wasm32-* ) _arch='wasm32' ;;
		( * ) false -- d32511ec ;;
	esac
	
	case "${_target}" in
		( native ) _os="${ZRUN_OS}" ;;
		( *-unknown-linux-gnu | *-unknown-linux-gnueabihf ) _os=linux ; _variant=glibc ;;
		( *-unknown-linux-musl | *-unknown-linux-musleabihf ) _os=linux ; _variant=musl ;;
		( *-unknown-linux-gnu-static | *-unknown-linux-gnueabihf-static ) _os=linux ; _variant=glibc--static ; _target_0="${_target_0%-static}" ;;
		( *-unknown-linux-musl-static | *-unknown-linux-musleabihf-static ) _os=linux ; _variant=musl--static ; _target_0="${_target_0%-static}" ;;
		( *-apple-darwin ) _os=darwin ;;
		( *-unknown-freebsd ) _os=freebsd ;;
		( *-unknown-openbsd ) _os=openbsd ;;
		( *-linux-android | *-linux-androideabi ) _os=android ;;
		( *-pc-windows-gnu ) _os=windows ; _bin_suffix='.exe' ; _bin_executable=false ;;
		( *-wasip1 ) _os=wasi ; _bin_suffix='.wasm' ; _bin_executable=false ;;
		( * ) false -- 540e56ef ;;
	esac
	
	case "${_bins}" in
		( all )
			_bins=(
					z-tokens
					zt-patterns
					zt-hashes
					zt-encodings
					zt-exchange
				#!	zt-oracles
				#!	zt-secrets
				)
		;;
		( * )
			_bins=(
					"${_bins}"
				)
		;;
	esac
	
	test -n "${_scratch}"
	
	if test -z "${_outputs}" ; then
		_outputs="$( exec -- "${ZRUN}" ':: workbench / outputs' )"
		_outputs="${_outputs}/binaries"
	fi
	test -d "${_outputs}"
	
	_builds="${_scratch}"
	test -d "${_builds}"
	
	if test "${_cross}" == false ; then
		_builds="${_builds}/target"
		test -d "${_builds}"
	else
		_identifier="$( exec -- md5sum -b <<< "${_type} -- ${_target} -- ${_scratch}" )"
		_identifier="${_identifier%% *}"
		_builds="${_builds}/cross/target--${_identifier}"
		test -d "${_builds}"
	fi
	
	_builds="${_builds}/${_type}"
	test -d "${_builds}"
	
	_builds="${_builds}/${_target}"
	test -d "${_builds}"
	
	if test "${_target}" != native ; then
		_builds="${_builds}/${_target_0}"
		test -d "${_builds}"
	fi
	
	_builds="${_builds}/${_type}"
	test -d "${_builds}"
	
	for _bin in "${_bins[@]}" ; do
		
	#	printf -- '[ii]  collecting `%s` (`%s` / `%s` / `%s` / `%s` / `%s`)...\n' "${_bin}" "${_os}" "${_arch}" "${_variant}" "${_type}" "${_target}" >&2
		test -f "${_builds}/${_bin}${_bin_suffix}"
		
		if test "${_variant}" != default ; then
			_output="${_outputs}/${_bin}--${_type}--${_os}--${_arch}--${_variant}"
		else
			_output="${_outputs}/${_bin}--${_type}--${_os}--${_arch}"
		fi
		
		if test "${_bin_executable}" == true ; then
			_rsync_chmod=F0755
		else
			_rsync_chmod=F0644
		fi
		
		rsync -i -c -a --chmod "${_rsync_chmod}" -- \
				"${_builds}/${_bin}${_bin_suffix}" \
				"${_output}" \
		#
		
	done
!!

