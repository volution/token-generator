#!/dev/null








<< tests / quick / exchange / run / debug
	"${ZRUN}" ':: cargo / debug / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--debug--linux--native" "${@}" \
	#
!!


<< tests / quick / exchange / run / release
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" "${@}" \
	#
!!








<< tests / quick / exchange / armor / hello
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			armor \
		<<< $'hello world!\n' \
	#
!!


<< tests / quick / exchange / armor / empty
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			armor \
		< /dev/null \
	#
!!


<< tests / quick / exchange / armor / notice
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			armor \
		< ./notice.txt \
	#
!!


<< tests / quick / exchange / armor / random
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	head -c 64 < /dev/urandom \
	| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			armor \
	#
!!




<< tests / quick / exchange / armor & dearmor / hello
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			armor \
		<<< $'hello world!\n' \
	| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			dearmor \
	#
!!




<< tests / quick / exchange / armor & dearmor / files
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	readarray -t -- _files \
		< <( exec -- "${ZRUN}" ':: tests / quick / exchange / files' ) -
	#
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	for _file in "${_files[@]}" ; do
		
		"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				armor \
			< "${_file}" \
		| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				dearmor \
		| md5sum -b -- /dev/fd/5 5<&0 \
		| md5sum -c --quiet 5< "${_file}" \
		#
		
	done
!!




<< tests / quick / exchange / armor & dearmor / random
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	for _index_1 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	for _index_2 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	for _index_3 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
		
		printf -- '[ii]  running iteration `%02d-%02d-%02d`...\n' "${_index_1}" "${_index_2}" "${_index_3}" >&2
		
		for _try in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
		
		while true ; do
			_size="${SRANDOM}"
			if test "${_size}" -le 134217728 ; then break ; fi
		done
		
		TIMEFORMAT="[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;  ${_size} bytes;"
		
		time \
		head -c "${_size}" < /dev/urandom \
		| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				armor \
		| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				dearmor \
			> /dev/null \
		#
		
	done ; done ; done ; done
!!








<< tests / quick / exchange / encode / hello
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			raw encode \
		<<< $'hello world!\n' \
	#
!!


<< tests / quick / exchange / encode / empty
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			raw encode \
		< /dev/null \
	#
!!


<< tests / quick / exchange / encode / notice
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			raw encode \
		< ./notice.txt \
	#
!!


<< tests / quick / exchange / encode / random
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	head -c 64 < /dev/urandom \
	| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			raw encode \
	#
!!




<< tests / quick / exchange / encode & decode / hello
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			raw encode \
		<<< $'hello world!\n' \
	| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			raw decode \
	#
!!




<< tests / quick / exchange / encode & decode / files
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	readarray -t -- _files \
		< <( exec -- "${ZRUN}" ':: tests / quick / exchange / files' ) -
	#
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	time \
	for _file in "${_files[@]}" ; do
		
		"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				raw encode \
			< "${_file}" \
		| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				raw decode \
		| md5sum -b -- /dev/fd/5 5<&0 \
		| md5sum -c --quiet 5< "${_file}" \
		#
		
	done
!!




<< tests / quick / exchange / encode & decode / random
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	for _index_1 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	for _index_2 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	for _index_3 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
		
		printf -- '[ii]  running iteration `%02d-%02d-%02d`...\n' "${_index_1}" "${_index_2}" "${_index_3}" >&2
		
		for _try in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
		
		while true ; do
			_size="${SRANDOM}"
			if test "${_size}" -le 134217728 ; then break ; fi
		done
		
		TIMEFORMAT="[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;  ${_size} bytes;"
		
		time \
		head -c "${_size}" < /dev/urandom \
		| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				raw encode \
		| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				raw decode \
			> /dev/null \
		#
		
	done ; done ; done ; done
!!








<< tests / quick / exchange / keys
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			keys "${@}" \
	#
!!


<< tests / quick / exchange / keys / self
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			keys --self true "${@}" \
	#
!!




<< tests / quick / exchange / ssh / keys
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			ssh keys "${@}" \
	#
!!


<< tests / quick / exchange / ssh / wrap / hello
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	_ssh_wrap="${__ZTOKENS_EXCHANGE_SSH_WRAP:?}"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			ssh wrap "${@}" \
				--key "${_ssh_wrap}" \
		<<< $'hello world!\n' \
	#
!!




<< tests / quick / exchange / password / hello
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	_sender_private="${__ZTOKENS_EXCHANGE_SENDER_PRIVATE:-}"
	_recipient_public="${__ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC:-}"
	
	_associated="${__ZTOKENS_EXCHANGE_ASSOCIATED:-}"
	_secret="${__ZTOKENS_EXCHANGE_SECRET:-}"
	_pin="${__ZTOKENS_EXCHANGE_PIN:-}"
	_seed="${__ZTOKENS_EXCHANGE_SEED:-}"
	_ballast="${__ZTOKENS_EXCHANGE_BALLAST:-}"
	
	_ssh_wrap="${__ZTOKENS_EXCHANGE_SSH_WRAP:-}"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			password \
				--sender "${_sender_private}" \
				--recipient "${_recipient_public}" \
				--associated "${_associated}" \
				--secret "${_secret}" \
				--pin "${_pin}" \
				--ssh-wrap "${_ssh_wrap}" \
				--seed "${_seed}" \
				--ballast "${_ballast}" \
				--empty-is-missing true \
		<<< $'hello world!\n' \
	#
!!




<< tests / quick / exchange / password / benchmark
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	_sender_private="${__ZTOKENS_EXCHANGE_SENDER_PRIVATE:-}"
	_recipient_public="${__ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC:-}"
	
	_associated="${__ZTOKENS_EXCHANGE_ASSOCIATED:-}"
	_secret="${__ZTOKENS_EXCHANGE_SECRET:-}"
	_pin="${__ZTOKENS_EXCHANGE_PIN:-}"
	_seed="${__ZTOKENS_EXCHANGE_SEED:-}"
	_ballast="${__ZTOKENS_EXCHANGE_BALLAST:-}"
	
	_ssh_wrap="${__ZTOKENS_EXCHANGE_SSH_WRAP:-}"
	
	_hyperfine_arguments=(
			--warmup 2
			--min-runs 10
			--max-runs 100
			--shell none
		##	--show-output
		)
	_hyperfine_commands=()
	
	_command=(
			"${__OUTPUTS}/binaries/z-exchange--release--linux--native"
				password \
					--sender "${_sender_private}" \
					--recipient "${_recipient_public}" \
					--associated "${_associated}" \
					--secret "${_secret}" \
					--pin "${_pin}" \
					--ssh-wrap "${_ssh_wrap}" \
					--seed "${_seed}" \
					--ballast "${_ballast}" \
					--empty-is-missing true \
		)
	_hyperfine_arguments+=(
			--command-name "password sender:${_sender_private:+Y} recipient:${_recipient_public:+Y} associated:${_associated:+Y} secret:${_secret:+Y} pin:${_pin:+Y} ssh-wrap:${_ssh_wrap:+Y} seed:${_seed:+Y} ballast:${_ballast:+Y}"
		)
	_hyperfine_commands+=(
			"${_command[*]@Q}"
		)
	
	exec -- hyperfine \
			"${_hyperfine_arguments[@]}" \
			-- \
			"${_hyperfine_commands[@]}" \
		< /dev/null \
	#
!!




<< tests / quick / exchange / encrypt / hello
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	_sender_private="${__ZTOKENS_EXCHANGE_SENDER_PRIVATE:-}"
	_recipient_public="${__ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC:-}"
	
	_associated="${__ZTOKENS_EXCHANGE_ASSOCIATED:-}"
	_secret="${__ZTOKENS_EXCHANGE_SECRET:-}"
	_pin="${__ZTOKENS_EXCHANGE_PIN:-}"
	_seed="${__ZTOKENS_EXCHANGE_SEED:-}"
	_ballast="${__ZTOKENS_EXCHANGE_BALLAST:-}"
	
	_ssh_wrap="${__ZTOKENS_EXCHANGE_SSH_WRAP:-}"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			encrypt \
				--sender "${_sender_private}" \
				--recipient "${_recipient_public}" \
				--associated "${_associated}" \
				--secret "${_secret}" \
				--pin "${_pin}" \
				--ssh-wrap "${_ssh_wrap}" \
				--seed "${_seed}" \
				--ballast "${_ballast}" \
				--siv \
				--empty-is-missing true \
		<<< $'hello world!\n' \
	#
!!


<< tests / quick / exchange / encrypt / empty
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	_sender_private="${__ZTOKENS_EXCHANGE_SENDER_PRIVATE:-}"
	_recipient_public="${__ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC:-}"
	
	_associated="${__ZTOKENS_EXCHANGE_ASSOCIATED:-}"
	_secret="${__ZTOKENS_EXCHANGE_SECRET:-}"
	_pin="${__ZTOKENS_EXCHANGE_PIN:-}"
	_seed="${__ZTOKENS_EXCHANGE_SEED:-}"
	_ballast="${__ZTOKENS_EXCHANGE_BALLAST:-}"
	
	_ssh_wrap="${__ZTOKENS_EXCHANGE_SSH_WRAP:-}"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			encrypt \
				--sender "${_sender_private}" \
				--recipient "${_recipient_public}" \
				--associated "${_associated}" \
				--secret "${_secret}" \
				--pin "${_pin}" \
				--ssh-wrap "${_ssh_wrap}" \
				--seed "${_seed}" \
				--ballast "${_ballast}" \
				--siv \
				--empty-is-missing true \
		< /dev/null \
	#
!!


<< tests / quick / exchange / encrypt / notice
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	_sender_private="${__ZTOKENS_EXCHANGE_SENDER_PRIVATE:-}"
	_recipient_public="${__ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC:-}"
	
	_associated="${__ZTOKENS_EXCHANGE_ASSOCIATED:-}"
	_secret="${__ZTOKENS_EXCHANGE_SECRET:-}"
	_pin="${__ZTOKENS_EXCHANGE_PIN:-}"
	_seed="${__ZTOKENS_EXCHANGE_SEED:-}"
	_ballast="${__ZTOKENS_EXCHANGE_BALLAST:-}"
	
	_ssh_wrap="${__ZTOKENS_EXCHANGE_SSH_WRAP:-}"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			encrypt \
				--sender "${_sender_private}" \
				--recipient "${_recipient_public}" \
				--associated "${_associated}" \
				--secret "${_secret}" \
				--pin "${_pin}" \
				--ssh-wrap "${_ssh_wrap}" \
				--seed "${_seed}" \
				--ballast "${_ballast}" \
				--siv \
				--empty-is-missing true \
		< ./notice.txt \
	#
!!


<< tests / quick / exchange / encrypt / random
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	_sender_private="${__ZTOKENS_EXCHANGE_SENDER_PRIVATE:-}"
	_recipient_public="${__ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC:-}"
	
	_associated="${__ZTOKENS_EXCHANGE_ASSOCIATED:-}"
	_secret="${__ZTOKENS_EXCHANGE_SECRET:-}"
	_pin="${__ZTOKENS_EXCHANGE_PIN:-}"
	_seed="${__ZTOKENS_EXCHANGE_SEED:-}"
	_ballast="${__ZTOKENS_EXCHANGE_BALLAST:-}"
	
	_ssh_wrap="${__ZTOKENS_EXCHANGE_SSH_WRAP:-}"
	
	time \
	head -c 64 < /dev/urandom \
	| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			encrypt \
				--sender "${_sender_private}" \
				--recipient "${_recipient_public}" \
				--associated "${_associated}" \
				--secret "${_secret}" \
				--pin "${_pin}" \
				--ssh-wrap "${_ssh_wrap}" \
				--seed "${_seed}" \
				--ballast "${_ballast}" \
				--siv \
				--empty-is-missing true \
	#
!!




<< tests / quick / exchange / encrypt & decrypt / hello
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	_sender_private="${__ZTOKENS_EXCHANGE_SENDER_PRIVATE:-}"
	_sender_public="${__ZTOKENS_EXCHANGE_SENDER_PUBLIC:-}"
	
	_recipient_private="${__ZTOKENS_EXCHANGE_RECIPIENT_PRIVATE:-}"
	_recipient_public="${__ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC:-}"
	
	_associated="${__ZTOKENS_EXCHANGE_ASSOCIATED:-}"
	_secret="${__ZTOKENS_EXCHANGE_SECRET:-}"
	_pin="${__ZTOKENS_EXCHANGE_PIN:-}"
	_seed="${__ZTOKENS_EXCHANGE_SEED:-}"
	_ballast="${__ZTOKENS_EXCHANGE_BALLAST:-}"
	
	_ssh_wrap="${__ZTOKENS_EXCHANGE_SSH_WRAP:-}"
	
	time \
	"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			encrypt \
				--sender "${_sender_private}" \
				--recipient "${_recipient_public}" \
				--associated "${_associated}" \
				--secret "${_secret}" \
				--pin "${_pin}" \
				--ssh-wrap "${_ssh_wrap}" \
				--seed "${_seed}" \
				--ballast "${_ballast}" \
				--empty-is-missing true \
		<<< $'hello world!\n' \
	| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
			decrypt \
				--sender "${_sender_public}" \
				--recipient "${_recipient_private}" \
				--associated "${_associated}" \
				--secret "${_secret}" \
				--pin "${_pin}" \
				--ssh-wrap "${_ssh_wrap}" \
				--seed "${_seed}" \
				--ballast "${_ballast}" \
				--empty-is-missing true \
	#
!!




<< tests / quick / exchange / encrypt & decrypt / files
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	_sender_private="${__ZTOKENS_EXCHANGE_SENDER_PRIVATE:-}"
	_sender_public="${__ZTOKENS_EXCHANGE_SENDER_PUBLIC:-}"
	
	_recipient_private="${__ZTOKENS_EXCHANGE_RECIPIENT_PRIVATE:-}"
	_recipient_public="${__ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC:-}"
	
	_associated="${__ZTOKENS_EXCHANGE_ASSOCIATED:-}"
	_secret="${__ZTOKENS_EXCHANGE_SECRET:-}"
	_pin="${__ZTOKENS_EXCHANGE_PIN:-}"
	_seed="${__ZTOKENS_EXCHANGE_SEED:-}"
	_ballast="${__ZTOKENS_EXCHANGE_BALLAST:-}"
	
	_ssh_wrap="${__ZTOKENS_EXCHANGE_SSH_WRAP:-}"
	
	readarray -t -- _files \
		< <( exec -- "${ZRUN}" ':: tests / quick / exchange / files' ) -
	#
	
	for _index_1 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	for _index_2 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	for _index_3 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
		
		printf -- '[ii]  running iteration `%02d-%02d-%02d`...\n' "${_index_1}" "${_index_2}" "${_index_3}" >&2
		
		TIMEFORMAT='[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;'
		
		export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
		
		time \
		for _file in "${_files[@]}" ; do
		
		"${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				encrypt \
					--sender "${_sender_private}" \
					--recipient "${_recipient_public}" \
					--associated "${_associated}" \
					--secret "${_secret}" \
					--pin "${_pin}" \
					--ssh-wrap "${_ssh_wrap}" \
					--seed "${_seed}" \
					--ballast "${_ballast}" \
					--empty-is-missing true \
			< "${_file}" \
		| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				decrypt \
					--sender "${_sender_public}" \
					--recipient "${_recipient_private}" \
					--associated "${_associated}" \
					--secret "${_secret}" \
					--pin "${_pin}" \
					--ssh-wrap "${_ssh_wrap}" \
					--seed "${_seed}" \
					--ballast "${_ballast}" \
					--empty-is-missing true \
		| md5sum -b -- /dev/fd/5 5<&0 \
		| md5sum -c --quiet 5< "${_file}" \
		#
		
	done ; done ; done ; done
!!




<< tests / quick / exchange / encrypt & decrypt / random
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	_sender_private="${__ZTOKENS_EXCHANGE_SENDER_PRIVATE:-}"
	_sender_public="${__ZTOKENS_EXCHANGE_SENDER_PUBLIC:-}"
	
	_recipient_private="${__ZTOKENS_EXCHANGE_RECIPIENT_PRIVATE:-}"
	_recipient_public="${__ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC:-}"
	
	_associated="${__ZTOKENS_EXCHANGE_ASSOCIATED:-}"
	_secret="${__ZTOKENS_EXCHANGE_SECRET:-}"
	_pin="${__ZTOKENS_EXCHANGE_PIN:-}"
	_seed="${__ZTOKENS_EXCHANGE_SEED:-}"
	_ballast="${__ZTOKENS_EXCHANGE_BALLAST:-}"
	
	_ssh_wrap="${__ZTOKENS_EXCHANGE_SSH_WRAP:-}"
	
	for _index_1 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	for _index_2 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
	for _index_3 in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
		
		printf -- '[ii]  running iteration `%02d-%02d-%02d`...\n' "${_index_1}" "${_index_2}" "${_index_3}" >&2
		
		for _try in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
		
		while true ; do
			_size="${SRANDOM}"
			if test "${_size}" -le 134217728 ; then break ; fi
		done
		
		TIMEFORMAT="[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;  ${_size} bytes;"
		
		export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
		
		time \
		head -c "${_size}" < /dev/urandom \
		| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				encrypt \
					--sender "${_sender_private}" \
					--recipient "${_recipient_public}" \
					--associated "${_associated}" \
					--secret "${_secret}" \
					--pin "${_pin}" \
					--ssh-wrap "${_ssh_wrap}" \
					--seed "${_seed}" \
					--ballast "${_ballast}" \
					--empty-is-missing true \
		| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" \
				decrypt \
					--sender "${_sender_public}" \
					--recipient "${_recipient_private}" \
					--associated "${_associated}" \
					--secret "${_secret}" \
					--pin "${_pin}" \
					--ssh-wrap "${_ssh_wrap}" \
					--seed "${_seed}" \
					--ballast "${_ballast}" \
					--empty-is-missing true \
			> /dev/null \
		#
		
	done ; done ; done ; done
!!








--<< tests / quick / exchange / encrypt & decrypt & password / cases / options
	test "${#}" -eq 0
	
	for _case_tool in password encrypt ; do
	for _case_deterministic in deterministic randomized ; do
	for _case_secret in without-secret empty-secret with-secret-1 with-secret-1d with-secret-2 with-secret-2d ; do
	for _case_ssh_wrap in without-ssh-wrap empty-ssh-wrap with-ssh-wrap-1 with-ssh-wrap-1d with-ssh-wrap-2 with-ssh-wrap-2d ; do
	for _case_pin in without-pin empty-pin with-pin-1 with-pin-1d with-pin-2 with-pin-2d ; do
	for _case_seed in without-seed empty-seed with-seed-1 with-seed-1d with-seed-2 with-seed-2d ; do
	for _case_ballast in without-ballast empty-ballast with-ballast-1 with-ballast-1d with-ballast-2 with-ballast-2d ; do
	for _case_associated in without-associated empty-associated with-associated-1 with-associated-2 ; do
	for _case_send in without-x25519 empty-x25519 send-x25519-11 send-x25519-21 send-x25519-21d send-x25519-12 send-x25519-12d self-x25519-1 self-x25519-2 self-x25519-2d ; do
		
		printf -- \
				'%s %s %s %s %s %s %s %s\n' \
				"${_case_tool}" \
				"${_case_deterministic}" \
				"${_case_secret}" \
				"${_case_ssh_wrap}" \
				"${_case_pin}" \
				"${_case_seed}" \
				"${_case_ballast}" \
				"${_case_associated}" \
				"${_case_send}" \
		#
		
	done ; done ; done ; done ; done ; done ; done ; done
!!


<< tests / quick / exchange / encrypt & decrypt & password / cases
	test "${#}" -eq 0
	"${ZRUN}" ':: cargo / release / build & collect' z-exchange < /dev/null > /dev/null
	export -- RUST_BACKTRACE=1
	
	_reports="$( exec -- readlink -e -- ./documentation/tests-exchange-cases )"
	_outputs="$( exec -- "${ZRUN}" ':: workbench / outputs' )"
	
	"${ZRUN}" ':: tests / quick / exchange / encrypt & decrypt & password / cases / options' \
	| sort -R \
	| while read -r -- _case_tool _case_deterministic _case_secret _case_ssh_wrap _case_pin _case_seed _case_ballast _case_associated _case_send ; do
		
		_pin_1=1234
		_pin_2=5678
		
		_associated_1='associated-1'
		_associated_2='associated-2'
		
		_secret_1='ztxcs1qvjhy8ftc7fjajtky3mcrgxdlacer2m6sj8hyxcaa2segdcnhjnqj7ylhm'
		_secret_2='ztxcs1zw32errd0vu44rvt2h6vnmfecjtp20aacyzpxcyg9dq3szerw0sswvu32a'
		
		_seed_1='ztxsd1lf6056vl0zl9xk2j5asj7336sskhyqmevsc32t2ct6def5mnwmcqe9kcmx'
		_seed_2='ztxsd1ggthngksghaqtnqegmdkn5jv53fw5ptv8wswa08ws7r2w9vs03js74k5ga'
		
		_ballast_1='ztxbl1ah428t6ux086pfdgv5d5z8fle06rll5azaglg8gcnvd65mup65qqckq348'
		_ballast_2='ztxbl1y00yn7a4jjqeyxke8u6hfqks7fhjadtamny4mmp6nc43qa9ra3mqu4swle'
		
		_ssh_wrap_1='ztxws1qqqqqzmnwd5z6etyxg6n2vfeqqqqqg9e9nt4vgd7c6s4tgmecj86kwpfpj7nsnnujzq6f4243jl2vecyrsqszf8qds8'
		_ssh_wrap_2='ztxws1qqqqqzmnwd5z6etyxg6n2vfeqqqqqgyg7zfdlhxsaymch3pu5c74xz82y5pt67grpy6ej8tcatltw4ar0gqszkku9ux'
		
		_x25519_1_sender_private='ztxsk1szluhkftlf5zee8wfd6v43el6qa9c7f74sn3xaxjrxzh84q7436qhmh920'
		_x25519_1_sender_public='ztxsp1m6f9fwz0ukd7agd3udrlqsu8j0ltc8evfpzw7n040yjatkr4u4nq38he88'
		_x25519_2_sender_private='ztxsk1jz7yrht80clxjz85puk9gegnq2y9zhcnww9z8kqx2zml707rcfssgqppwg'
		_x25519_2_sender_public='ztxsp1pmx399paepdyjwscpsk95w57tmfxm5hlp4pwxyxl2r57flmz6d0sk2jvyp'
		
		_x25519_1_recipient_private='ztxrk1rp0qkrrrht77nh42pkzcf70uy3yrs5uxpq6uvql55h3jsgsxm9fqn6lxmk'
		_x25519_1_recipient_public='ztxrp17qqdhxkytsfp0ugz0h3zxuy4l2hhszxpaqt9cmqndjg8qllxfamszurtah'
		_x25519_2_recipient_private='ztxrk18z7rcqn88dwe2k3ya49gj3nldk02ute345580932w6nhm7jmgfkql4x4k0'
		_x25519_2_recipient_public='ztxrp1fpay0z3f2sdyrj8c57yvfde9v3lf8pgj6532shuks26hstncng2qmy2dny'
		
		_x25519_3_sender_private='ztxsk17zpadjtunyk3tst6p08e8qk9hpaxvrat595vy3kgtu0t8d8ehazqg5na4m'
		_x25519_3_recipient_private='ztxrk17zpadjtunyk3tst6p08e8qk9hpaxvrat595vy3kgtu0t8d8ehazqfgdyps'
		_x25519_4_sender_private='ztxsk1yp5x8wjj2ed680kcgrd9ufs5ls5lw5ln0qjp70hu3jr9fgesw3kqn85j9x'
		_x25519_4_recipient_private='ztxrk1yp5x8wjj2ed680kcgrd9ufs5ls5lw5ln0qjp70hu3jr9fgesw3kqjm2t3d'
		
		_file=./notice.txt
		
		_encrypt_arguments=()
		_decrypt_arguments=()
		_common_arguments=()
		
		_empty_is_missing=false
		
		case "${_case_send}" in
			( send-x25519-11 )
				_encrypt_arguments+=(
						--sender "${_x25519_1_sender_private}"
						--recipient "${_x25519_1_recipient_public}"
					)
				_decrypt_arguments+=(
						--recipient "${_x25519_1_recipient_private}"
						--sender "${_x25519_1_sender_public}"
					)
			;;
			( send-x25519-12 )
				_encrypt_arguments+=(
						--sender "${_x25519_1_sender_private}"
						--recipient "${_x25519_1_recipient_public}"
						--recipient "${_x25519_2_recipient_public}"
					)
				_decrypt_arguments+=(
						--recipient "${_x25519_2_recipient_private}"
						--recipient "${_x25519_1_recipient_private}"
						--sender "${_x25519_1_sender_public}"
					)
			;;
			( send-x25519-12d )
				_encrypt_arguments+=(
						--sender "${_x25519_1_sender_private}"
						--recipient "${_x25519_1_recipient_public}"
						--recipient "${_x25519_2_recipient_public}"
						--recipient "${_x25519_2_recipient_public}"
					)
				_decrypt_arguments+=(
						--recipient "${_x25519_2_recipient_private}"
						--recipient "${_x25519_2_recipient_private}"
						--recipient "${_x25519_1_recipient_private}"
						--sender "${_x25519_1_sender_public}"
					)
			;;
			( send-x25519-21 )
				_encrypt_arguments+=(
						--sender "${_x25519_1_sender_private}"
						--sender "${_x25519_2_sender_private}"
						--recipient "${_x25519_1_recipient_public}"
					)
				_decrypt_arguments+=(
						--recipient "${_x25519_1_recipient_private}"
						--sender "${_x25519_2_sender_public}"
						--sender "${_x25519_1_sender_public}"
					)
			;;
			( send-x25519-21d )
				_encrypt_arguments+=(
						--sender "${_x25519_1_sender_private}"
						--sender "${_x25519_2_sender_private}"
						--sender "${_x25519_2_sender_private}"
						--recipient "${_x25519_1_recipient_public}"
					)
				_decrypt_arguments+=(
						--recipient "${_x25519_1_recipient_private}"
						--sender "${_x25519_2_sender_public}"
						--sender "${_x25519_2_sender_public}"
						--sender "${_x25519_1_sender_public}"
					)
			;;
			( self-x25519-1 )
				_encrypt_arguments+=(
						--sender "${_x25519_3_sender_private}"
					)
				_decrypt_arguments+=(
						--recipient "${_x25519_3_recipient_private}"
					)
			;;
			( self-x25519-2 )
				_encrypt_arguments+=(
						--sender "${_x25519_3_sender_private}"
						--sender "${_x25519_4_sender_private}"
					)
				_decrypt_arguments+=(
						--recipient "${_x25519_4_recipient_private}"
						--recipient "${_x25519_3_recipient_private}"
					)
			;;
			( self-x25519-2d )
				_encrypt_arguments+=(
						--sender "${_x25519_3_sender_private}"
						--sender "${_x25519_3_sender_private}"
						--sender "${_x25519_4_sender_private}"
					)
				_decrypt_arguments+=(
						--recipient "${_x25519_4_recipient_private}"
						--recipient "${_x25519_3_recipient_private}"
						--recipient "${_x25519_3_recipient_private}"
					)
			;;
			( without-x25519 )
			;;
			( empty-x25519 )
				_encrypt_arguments+=(
						--sender ''
					)
				_decrypt_arguments+=(
					)
				_empty_is_missing=true
			;;
			( __* )
				continue
			;;
			( * )
				false -- '[4d9f156a]' "${_case_send}"
			;;
		esac
		
		case "${_case_associated}" in
			( with-associated-1 )
				_common_arguments+=(
						--associated "${_associated_1}"
					)
			;;
			( with-associated-2 )
				_common_arguments+=(
						--associated "${_associated_1}"
						--associated "${_associated_2}"
					)
			;;
			( without-associated )
			;;
			( empty-associated )
				_encrypt_arguments+=(
						--associated ''
					)
				_decrypt_arguments+=(
					)
				_empty_is_missing=true
			;;
			( __* )
				continue
			;;
			( * )
				false -- '[0x78bbf839]' "${_case_associated}"
			;;
		esac
		
		case "${_case_pin}" in
			( with-pin-1 )
				_common_arguments+=(
						--pin "${_pin_1}"
					)
			;;
			( with-pin-1d )
				_encrypt_arguments+=(
						--pin "${_pin_1}"
					)
				_decrypt_arguments+=(
						--pin "${_pin_1}"
						--pin "${_pin_1}"
					)
			;;
			( with-pin-2 )
				_encrypt_arguments+=(
						--pin "${_pin_1}"
						--pin "${_pin_2}"
					)
				_decrypt_arguments+=(
						--pin "${_pin_2}"
						--pin "${_pin_1}"
					)
			;;
			( with-pin-2d )
				_encrypt_arguments+=(
						--pin "${_pin_1}"
						--pin "${_pin_1}"
						--pin "${_pin_2}"
					)
				_decrypt_arguments+=(
						--pin "${_pin_2}"
						--pin "${_pin_1}"
						--pin "${_pin_1}"
					)
			;;
			( without-pin )
			;;
			( empty-pin )
				_encrypt_arguments+=(
						--pin ''
					)
				_decrypt_arguments+=(
					)
				_empty_is_missing=true
			;;
			( __* )
				continue
			;;
			( * )
				false -- '[ca46feb8]' "${_case_pin}"
			;;
		esac
		
		case "${_case_secret}" in
			( with-secret-1 )
				_common_arguments+=(
						--secret "${_secret_1}"
					)
			;;
			( with-secret-1d )
				_encrypt_arguments+=(
						--secret "${_secret_1}"
					)
				_decrypt_arguments+=(
						--secret "${_secret_1}"
						--secret "${_secret_1}"
					)
			;;
			( with-secret-2 )
				_encrypt_arguments+=(
						--secret "${_secret_1}"
						--secret "${_secret_2}"
					)
				_decrypt_arguments+=(
						--secret "${_secret_2}"
						--secret "${_secret_1}"
					)
			;;
			( with-secret-2d )
				_encrypt_arguments+=(
						--secret "${_secret_1}"
						--secret "${_secret_1}"
						--secret "${_secret_2}"
					)
				_decrypt_arguments+=(
						--secret "${_secret_2}"
						--secret "${_secret_1}"
						--secret "${_secret_1}"
					)
			;;
			( without-secret )
			;;
			( empty-secret )
				_encrypt_arguments+=(
						--secret ''
					)
				_decrypt_arguments+=(
					)
				_empty_is_missing=true
			;;
			( __* )
				continue
			;;
			( * )
				false -- '[0x91e71e27]' "${_case_secret}"
			;;
		esac
		
		case "${_case_seed}" in
			( with-seed-1 )
				_common_arguments+=(
						--seed "${_seed_1}"
					)
			;;
			( with-seed-1d )
				_encrypt_arguments+=(
						--seed "${_seed_1}"
					)
				_decrypt_arguments+=(
						--seed "${_seed_1}"
						--seed "${_seed_1}"
					)
			;;
			( with-seed-2 )
				_encrypt_arguments+=(
						--seed "${_seed_1}"
						--seed "${_seed_2}"
					)
				_decrypt_arguments+=(
						--seed "${_seed_2}"
						--seed "${_seed_1}"
					)
			;;
			( with-seed-2d )
				_encrypt_arguments+=(
						--seed "${_seed_1}"
						--seed "${_seed_1}"
						--seed "${_seed_2}"
					)
				_decrypt_arguments+=(
						--seed "${_seed_2}"
						--seed "${_seed_1}"
						--seed "${_seed_1}"
					)
			;;
			( without-seed )
			;;
			( empty-seed )
				_encrypt_arguments+=(
						--seed ''
					)
				_decrypt_arguments+=(
					)
				_empty_is_missing=true
			;;
			( __* )
				continue
			;;
			( * )
				false -- '[0x7de1942b]' "${_case_seed}"
			;;
		esac
		
		case "${_case_ballast}" in
			( with-ballast-1 )
				_common_arguments+=(
						--ballast "${_ballast_1}"
					)
			;;
			( with-ballast-1d )
				_encrypt_arguments+=(
						--ballast "${_ballast_1}"
					)
				_decrypt_arguments+=(
						--ballast "${_ballast_1}"
						--ballast "${_ballast_1}"
					)
			;;
			( with-ballast-2 )
				_encrypt_arguments+=(
						--ballast "${_ballast_1}"
						--ballast "${_ballast_2}"
					)
				_decrypt_arguments+=(
						--ballast "${_ballast_2}"
						--ballast "${_ballast_1}"
					)
			;;
			( with-ballast-2d )
				_encrypt_arguments+=(
						--ballast "${_ballast_1}"
						--ballast "${_ballast_1}"
						--ballast "${_ballast_2}"
					)
				_decrypt_arguments+=(
						--ballast "${_ballast_2}"
						--ballast "${_ballast_1}"
						--ballast "${_ballast_1}"
					)
			;;
			( without-ballast )
			;;
			( empty-ballast )
				_encrypt_arguments+=(
						--ballast ''
					)
				_decrypt_arguments+=(
					)
				_empty_is_missing=true
			;;
			( __* )
				continue
			;;
			( * )
				false -- '[0x5f499152]' "${_case_ballast}"
			;;
		esac
		
		case "${_case_ssh_wrap}" in
			( with-ssh-wrap-1 )
				_common_arguments+=(
						--ssh-wrap "${_ssh_wrap_1}"
					)
			;;
			( with-ssh-wrap-1d )
				_encrypt_arguments+=(
						--ssh-wrap "${_ssh_wrap_1}"
					)
				_decrypt_arguments+=(
						--ssh-wrap "${_ssh_wrap_1}"
						--ssh-wrap "${_ssh_wrap_1}"
					)
			;;
			( with-ssh-wrap-2 )
				_encrypt_arguments+=(
						--ssh-wrap "${_ssh_wrap_1}"
						--ssh-wrap "${_ssh_wrap_2}"
					)
				_decrypt_arguments+=(
						--ssh-wrap "${_ssh_wrap_2}"
						--ssh-wrap "${_ssh_wrap_1}"
					)
			;;
			( with-ssh-wrap-2d )
				_encrypt_arguments+=(
						--ssh-wrap "${_ssh_wrap_1}"
						--ssh-wrap "${_ssh_wrap_1}"
						--ssh-wrap "${_ssh_wrap_2}"
					)
				_decrypt_arguments+=(
						--ssh-wrap "${_ssh_wrap_2}"
						--ssh-wrap "${_ssh_wrap_1}"
						--ssh-wrap "${_ssh_wrap_1}"
					)
			;;
			( without-ssh-wrap )
			;;
			( empty-ssh-wrap )
				_encrypt_arguments+=(
						--ssh-wrap ''
					)
				_decrypt_arguments+=(
					)
				_empty_is_missing=true
			;;
			( __* )
				continue
			;;
			( * )
				false -- '[eee16443]' "${_case_ssh_wrap}"
			;;
		esac
		
		case "${_case_deterministic}" in
			( deterministic )
				if test "${_case_tool}" != password ; then
					_encrypt_arguments+=(
							--siv
						)
				fi
			;;
			( randomized )
				if test "${_case_tool}" == password ; then
					continue
				fi
			;;
			( __* )
				continue
			;;
			( * )
				false -- '[ee232fa3]' "${_case_deterministic}"
			;;
		esac
		
		_identifier="${_case_tool}--${_case_send}--${_case_pin}--${_case_secret}--${_case_seed}--${_case_ballast}--${_case_ssh_wrap}--${_case_associated}--${_case_deterministic}"
		_report="${_reports}/${_identifier}.txt"
		_output="${_outputs}/tests/${_identifier}.${$}.tmp"
		
		if test -e "${_report}" ; then
			continue
		fi
		
		printf -- '\n' >&2
		printf -- '[ii]  running iteration `%s %s %s %s %s %s %s %s %s`...\n' "${_case_tool}" "${_case_send}" "${_case_pin}" "${_case_secret}" "${_case_seed}" "${_case_ballast}" "${_case_ssh_wrap}" "${_case_associated}" "${_case_deterministic}" >&2
		
		if test "${#_encrypt_arguments[@]}" -eq 0 ; then
			printf -- '[ii]    -> empty arguments;  skipping!\n' >&2
			continue
		fi
		if test "${#_decrypt_arguments[@]}" -eq 0 ; then
			printf -- '[ii]    -> empty arguments;  skipping!\n' >&2
			continue
		fi
		
		_common_arguments+=(
				--empty-is-missing "${_empty_is_missing}"
			)
		
		TIMEFORMAT="[ii]    -> CPU (u/s/w):  %3lU %3lS %3lR;"
		
		export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
		
		case "${_case_tool}" in
			
			( password )
				
				_password_command=(
						password
							"${_encrypt_arguments[@]}"
							"${_common_arguments[@]}"
					)
				
				printf -- '[xx]    >> %s\n' "${_password_command[*]@Q}" >&2
				
				printf -- '>>  %q' z-tokens > "${_output}"
				printf -- ' %q' "${_password_command[@]}" >> "${_output}"
				printf -- '\n\n' >> "${_output}"
				
				time \
				"${__OUTPUTS}/binaries/z-exchange--release--linux--native" "${_password_command[@]}" \
					< "${_file}" \
					>> "${_output}" \
				#
			;;
			
			( encrypt )
				
				_encrypt_command=(
						encrypt
							"${_encrypt_arguments[@]}"
							"${_common_arguments[@]}"
					)
				_decrypt_command=(
						decrypt
							"${_decrypt_arguments[@]}"
							"${_common_arguments[@]}"
					)
				
				printf -- '[xx]    >> %s\n' "${_encrypt_command[*]@Q}" >&2
				printf -- '[xx]    >> %s\n' "${_decrypt_command[*]@Q}" >&2
				
				printf -- '>>  %q' z-tokens > "${_output}"
				printf -- ' %q' "${_encrypt_command[@]}" >> "${_output}"
				printf -- '\n' >> "${_output}"
				
				printf -- '>>  %q' z-tokens >> "${_output}"
				printf -- ' %q' "${_decrypt_command[@]}" >> "${_output}"
				printf -- '\n' >> "${_output}"
				
				printf -- '\n' >> "${_output}"
				
				time \
				cat \
					< "${_file}" \
				| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" "${_encrypt_command[@]}" \
				| tee -a -- /dev/stderr 2>> "${_output}" \
				| "${__OUTPUTS}/binaries/z-exchange--release--linux--native" "${_decrypt_command[@]}" \
				| md5sum -b -- /dev/fd/5 5<&0 \
				| md5sum -c --quiet 5< "${_file}" \
				#
			;;
			
			( * )
				false -- '[12356273]' "${_case_tool}"
			;;
		esac
		
		mv -T -- "${_output}" "${_report}"
		
		printf -- '\n' >&2
		
	done
!!








--<< tests / quick / exchange / files
	test "${#}" -eq 0
	
	_extra_files=(
			/dev/null
		)
	
	printf -- '%s\n' "${_extra_files}"
	
	find ./sources -type f | sort
!!








<< tests / quick / exchange / ssh / generate
	test "${#}" -eq 0
	
	_path="${__OUTPUTS}/ssh-keygen.${$}.${SRANDOM}"
	
	ssh-keygen \
			-q \
			-t ed25519 \
			-C 'z-exchange ssh wrap key for testing' \
			-N '' \
			-f "${_path}" \
	#
	
	printf -- '## key fingerprint\n'
	ssh-keygen \
			-l \
			-E SHA256 \
			-f "${_path}.pub" \
	#
	printf -- '\n'
	
	printf -- '## public key\n'
	cat -- "${_path}.pub"
	printf -- '\n'
	
	printf -- '## private key\n'
	cat -- "${_path}"
	printf -- '\n'
	
	rm -- "${_path}" "${_path}.pub"
!!


<< tests / quick / exchange / ssh / load / testing-1
	test "${#}" -eq 0
	
	printf -- '[ii]  loading `%s`...\n' \
			'ztxws1qqqqqzmnwd5z6etyxg6n2vfeqqqqqg9e9nt4vgd7c6s4tgmecj86kwpfpj7nsnnujzq6f4243jl2vecyrsqszf8qds8' \
			'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILks11YhvsahVaN5xI+rOCkMvThOfJCBpNVVjL6mZwQc' \
			'SHA256:ro0s5DyFq2CE4LuWiWLL9TAfT7Uy+kM2+VLjteCHBIc' \
		>&2 \
	#
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	ssh-add -- /dev/stdin << 'EOS'
	-----BEGIN OPENSSH PRIVATE KEY-----
	b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
	QyNTUxOQAAACC5LNdWIb7GoVWjecSPqzgpDL04TnyQgaTVVYy+pmcEHAAAALCIOkpDiDpK
	QwAAAAtzc2gtZWQyNTUxOQAAACC5LNdWIb7GoVWjecSPqzgpDL04TnyQgaTVVYy+pmcEHA
	AAAEBt/+OBtWrN7kZOK/AidxjmK+6hgt80u9RMII7Qf6ADY7ks11YhvsahVaN5xI+rOCkM
	vThOfJCBpNVVjL6mZwQcAAAAKnotdG9rZW5zIGV4Y2hhbmdlIHNzaCB3cmFwIGtleSBmb3
	IgdGVzdGluZwECAw==
	-----END OPENSSH PRIVATE KEY-----
	EOS
!!


<< tests / quick / exchange / ssh / load / testing-2
	test "${#}" -eq 0
	
	printf -- '[ii]  loading `%s`...\n' \
			'ztxws1qqqqqzmnwd5z6etyxg6n2vfeqqqqqgyg7zfdlhxsaymch3pu5c74xz82y5pt67grpy6ej8tcatltw4ar0gqszkku9ux' \
			'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIjwkt/c0Ok3i8Q8pj1TCOolAr15Awk1mR146v63V6N6' \
			'SHA256:WRjxd4AByQpJgIqT24dkBU0gUQzmX+3iHnMwoiE9PRE' \
		>&2 \
	#
	
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	ssh-add -- /dev/stdin << 'EOS'
	-----BEGIN OPENSSH PRIVATE KEY-----
	b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
	QyNTUxOQAAACCI8JLf3NDpN4vEPKY9UwjqJQK9eQMJNZkdeOr+t1ejegAAALD1rAbQ9awG
	0AAAAAtzc2gtZWQyNTUxOQAAACCI8JLf3NDpN4vEPKY9UwjqJQK9eQMJNZkdeOr+t1ejeg
	AAAEDakYilS6TJ8D7ocHJjLj82IImDIr145vjxKwzp0e04qIjwkt/c0Ok3i8Q8pj1TCOol
	Ar15Awk1mR146v63V6N6AAAAKnotdG9rZW5zIGV4Y2hhbmdlIHNzaCB3cmFwIGtleSBmb3
	IgdGVzdGluZwECAw==
	-----END OPENSSH PRIVATE KEY-----
	EOS
!!


<< tests / quick / exchange / ssh / agent
	test "${#}" -eq 0
	
	export -- SSH_DTACH_SOCK="${__OUTPUTS}/tests/ssh-agent-dtach.sock"
	export -- SSH_AUTH_SOCK="${__OUTPUTS}/tests/ssh-agent.sock"
	
	exec -- \
		dtach -A "${SSH_DTACH_SOCK}" \
	ssh-agent \
			-s \
			-d \
			-a "${SSH_AUTH_SOCK}" \
	#
!!








##&&== env-fallback __ZTOKENS_EXCHANGE_SENDER_PRIVATE ztxsk1szluhkftlf5zee8wfd6v43el6qa9c7f74sn3xaxjrxzh84q7436qhmh920
##&&== env-fallback __ZTOKENS_EXCHANGE_SENDER_PUBLIC ztxsp1m6f9fwz0ukd7agd3udrlqsu8j0ltc8evfpzw7n040yjatkr4u4nq38he88

##&&== env-fallback __ZTOKENS_EXCHANGE_RECIPIENT_PRIVATE ztxrk1rp0qkrrrht77nh42pkzcf70uy3yrs5uxpq6uvql55h3jsgsxm9fqn6lxmk
##&&== env-fallback __ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC ztxrp17qqdhxkytsfp0ugz0h3zxuy4l2hhszxpaqt9cmqndjg8qllxfamszurtah


:: tests / quick / exchange / set / sender-recipient / empty :: export -- __ZTOKENS_EXCHANGE_SENDER_PRIVATE='' __ZTOKENS_EXCHANGE_SENDER_PUBLIC='' __ZTOKENS_EXCHANGE_RECIPIENT_PRIVATE='' __ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC=''
:: tests / quick / exchange / set / sender-recipient / both :: export -- __ZTOKENS_EXCHANGE_SENDER_PRIVATE=ztxsk1szluhkftlf5zee8wfd6v43el6qa9c7f74sn3xaxjrxzh84q7436qhmh920 __ZTOKENS_EXCHANGE_SENDER_PUBLIC=ztxsp1m6f9fwz0ukd7agd3udrlqsu8j0ltc8evfpzw7n040yjatkr4u4nq38he88 __ZTOKENS_EXCHANGE_RECIPIENT_PRIVATE=ztxrk1rp0qkrrrht77nh42pkzcf70uy3yrs5uxpq6uvql55h3jsgsxm9fqn6lxmk __ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC=ztxrp17qqdhxkytsfp0ugz0h3zxuy4l2hhszxpaqt9cmqndjg8qllxfamszurtah
:: tests / quick / exchange / set / sender-recipient / self :: export -- __ZTOKENS_EXCHANGE_SENDER_PRIVATE=ztxsk17zpadjtunyk3tst6p08e8qk9hpaxvrat595vy3kgtu0t8d8ehazqg5na4m __ZTOKENS_EXCHANGE_SENDER_PUBLIC= __ZTOKENS_EXCHANGE_RECIPIENT_PRIVATE=ztxrk17zpadjtunyk3tst6p08e8qk9hpaxvrat595vy3kgtu0t8d8ehazqfgdyps __ZTOKENS_EXCHANGE_RECIPIENT_PUBLIC=

:: tests / quick / exchange / set / associated / empty :: export -- __ZTOKENS_EXCHANGE_ASSOCIATED=''
:: tests / quick / exchange / set / associated / 1234 :: export -- __ZTOKENS_EXCHANGE_ASSOCIATED='1234'
:: tests / quick / exchange / set / associated / random :: export -- __ZTOKENS_EXCHANGE_ASSOCIATED="${SRANDOM}"

:: tests / quick / exchange / set / secret / empty :: export -- __ZTOKENS_EXCHANGE_SECRET=''
:: tests / quick / exchange / set / secret / testing-1 :: export -- __ZTOKENS_EXCHANGE_SECRET='ztxcs1qvjhy8ftc7fjajtky3mcrgxdlacer2m6sj8hyxcaa2segdcnhjnqj7ylhm'
:: tests / quick / exchange / set / secret / testing-2 :: export -- __ZTOKENS_EXCHANGE_SECRET='ztxcs1zw32errd0vu44rvt2h6vnmfecjtp20aacyzpxcyg9dq3szerw0sswvu32a'

:: tests / quick / exchange / set / seed / empty :: export -- __ZTOKENS_EXCHANGE_SEED=''
:: tests / quick / exchange / set / seed / testing-1 :: export -- __ZTOKENS_EXCHANGE_SEED='ztxsd1lf6056vl0zl9xk2j5asj7336sskhyqmevsc32t2ct6def5mnwmcqe9kcmx'
:: tests / quick / exchange / set / seed / testing-2 :: export -- __ZTOKENS_EXCHANGE_SEED='ztxsd1ggthngksghaqtnqegmdkn5jv53fw5ptv8wswa08ws7r2w9vs03js74k5ga'

:: tests / quick / exchange / set / ballast / empty :: export -- __ZTOKENS_EXCHANGE_BALLAST=''
:: tests / quick / exchange / set / ballast / testing-1 :: export -- __ZTOKENS_EXCHANGE_BALLAST='ztxbl1ah428t6ux086pfdgv5d5z8fle06rll5azaglg8gcnvd65mup65qqckq348'
:: tests / quick / exchange / set / ballast / testing-2 :: export -- __ZTOKENS_EXCHANGE_BALLAST='ztxbl1y00yn7a4jjqeyxke8u6hfqks7fhjadtamny4mmp6nc43qa9ra3mqu4swle'

:: tests / quick / exchange / set / pin / empty :: export -- __ZTOKENS_EXCHANGE_PIN=''
:: tests / quick / exchange / set / pin / 1234 :: export -- __ZTOKENS_EXCHANGE_PIN='1234'
:: tests / quick / exchange / set / pin / random :: export -- __ZTOKENS_EXCHANGE_PIN="${SRANDOM}"

:: tests / quick / exchange / set / ssh-wrap / empty :: export -- __ZTOKENS_EXCHANGE_SSH_WRAP=''
:: tests / quick / exchange / set / ssh-wrap / testing-1 :: export -- __ZTOKENS_EXCHANGE_SSH_WRAP=ztxws1qqqqqzmnwd5z6etyxg6n2vfeqqqqqg9e9nt4vgd7c6s4tgmecj86kwpfpj7nsnnujzq6f4243jl2vecyrsqszf8qds8
:: tests / quick / exchange / set / ssh-wrap / testing-2 :: export -- __ZTOKENS_EXCHANGE_SSH_WRAP=ztxws1qqqqqzmnwd5z6etyxg6n2vfeqqqqqgyg7zfdlhxsaymch3pu5c74xz82y5pt67grpy6ej8tcatltw4ar0gqszkku9ux


