

#[ allow (unused_macros) ]
macro_rules! impl_sensitive_drop {
	( <{ $( $_template_a : tt )* }> $_type : ty where <{ $( $_where : tt )+ }> ) => {
		impl < $( $_template_a )* > Drop for $_type where $( $_where )+ {
			fn drop (&mut self) -> () {
				self.erase ();
			}
		}
	};
	( <{ $( $_template_a : tt )* }> $_type : ty ) => {
		impl < $( $_template_a )* > Drop for $_type {
			fn drop (&mut self) -> () {
				self.erase ();
			}
		}
	};
	( $_type : ty ) => {
		impl Drop for $_type {
			fn drop (&mut self) -> () {
				self.erase ();
			}
		}
	};
}




#[ allow (unused_macros) ]
macro_rules! impl_sensitive_nop {
	( $_type : ident ) => {
		impl Sensitive for $_type {
			fn erase (&mut self) -> () {
				// NOP
			}
		}
	};
}




#[ allow (unused_macros) ]
macro_rules! impl_sensitive {
	( <{ $( $_template_a : tt )* }> $_type : ty where <{ $( $_where : tt )+ }> => |$_self : ident| $_block : block ) => {
		impl < $( $_template_a )* > Sensitive for $_type where $( $_where )+ {
			fn erase (&mut $_self) -> () {
				$_block
			}
		}
	};
	( <{ $( $_template_a : tt )* }> $_type : ty => |$_self : ident| $_block : block ) => {
		impl < $( $_template_a )* > Sensitive for $_type {
			fn erase (&mut $_self) -> () {
				$_block
			}
		}
	};
	( $_type : ty => |$_self : ident| $_block : block ) => {
		impl Sensitive for $_type {
			fn erase (&mut $_self) -> () {
				$_block
			}
		}
	};
}




#[ allow (unused_macros) ]
macro_rules! impl_sensitive_zeroize {
	( impl $( $_token : tt )+ ) => {
		impl $( $_token )+ {
			fn erase (&mut self) -> () {
				::zeroize::Zeroize::zeroize (self);
			}
		}
	};
	( for { $( $_type : ty, )* }) => {
		$(
			impl_sensitive_zeroize! (impl Sensitive for $_type);
		)*
	};
	( <{ $( $_template_a : tt )* }> $_type : ty where <{ $( $_where : tt )+ }> ) => {
		impl_sensitive_zeroize! ( impl < $( $_template_a )* > Sensitive for $_type where $( $_where )+ );
//		impl_sensitive_zeroize! ( impl < $( $_template_a )* > Sensitive for [$_type] where $( $_where )+ );
//		impl_sensitive_zeroize! ( impl < const N : usize, $( $_template_a )* > Sensitive for [$_type; N] where $( $_where )+ );
	};
	( <{ $( $_template_a : tt )* }> $_type : ty ) => {
		impl_sensitive_zeroize! ( impl < $( $_template_a )* > Sensitive for $_type );
//		impl_sensitive_zeroize! ( impl < $( $_template_a )* > Sensitive for [$_type] );
//		impl_sensitive_zeroize! ( impl < const N : usize, $( $_template_a )* > Sensitive for [$_type; N] );
	};
	( $_type : ty ) => {
		impl_sensitive_zeroize! ( impl Sensitive for $_type );
//		impl_sensitive_zeroize! ( impl Sensitive for [$_type] );
//		impl_sensitive_zeroize! ( impl < const N : usize > Sensitive for [$_type; N] );
	};
}


